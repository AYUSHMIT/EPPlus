### YamlMime:ManagedReference
items:
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Lexer
  commentId: T:OfficeOpenXml.FormulaParsing.LexicalAnalysis.Lexer
  id: Lexer
  parent: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  children:
  - OfficeOpenXml.FormulaParsing.LexicalAnalysis.Lexer.#ctor(OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionRepository,OfficeOpenXml.FormulaParsing.INameValueProvider)
  - OfficeOpenXml.FormulaParsing.LexicalAnalysis.Lexer.#ctor(OfficeOpenXml.FormulaParsing.LexicalAnalysis.ISourceCodeTokenizer,OfficeOpenXml.FormulaParsing.LexicalAnalysis.ISyntacticAnalyzer)
  - OfficeOpenXml.FormulaParsing.LexicalAnalysis.Lexer.Tokenize(System.String)
  - OfficeOpenXml.FormulaParsing.LexicalAnalysis.Lexer.Tokenize(System.String,System.String)
  langs:
  - csharp
  - vb
  name: Lexer
  nameWithType: Lexer
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Lexer
  type: Class
  source:
    remote:
      path: src/EPPlus/FormulaParsing/LexicalAnalysis/Lexer.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Lexer
    path: ../src/EPPlus/FormulaParsing/LexicalAnalysis/Lexer.cs
    startLine: 21
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  syntax:
    content: 'public class Lexer : ILexer'
    content.vb: >-
      Public Class Lexer
          Implements ILexer
  inheritance:
  - System.Object
  implements:
  - OfficeOpenXml.FormulaParsing.LexicalAnalysis.ILexer
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Lexer.#ctor(OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionRepository,OfficeOpenXml.FormulaParsing.INameValueProvider)
  commentId: M:OfficeOpenXml.FormulaParsing.LexicalAnalysis.Lexer.#ctor(OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionRepository,OfficeOpenXml.FormulaParsing.INameValueProvider)
  id: '#ctor(OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionRepository,OfficeOpenXml.FormulaParsing.INameValueProvider)'
  parent: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Lexer
  langs:
  - csharp
  - vb
  name: Lexer(FunctionRepository, INameValueProvider)
  nameWithType: Lexer.Lexer(FunctionRepository, INameValueProvider)
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Lexer.Lexer(OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionRepository, OfficeOpenXml.FormulaParsing.INameValueProvider)
  type: Constructor
  source:
    remote:
      path: src/EPPlus/FormulaParsing/LexicalAnalysis/Lexer.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: .ctor
    path: ../src/EPPlus/FormulaParsing/LexicalAnalysis/Lexer.cs
    startLine: 23
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  syntax:
    content: public Lexer(FunctionRepository functionRepository, INameValueProvider nameValueProvider)
    parameters:
    - id: functionRepository
      type: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionRepository
    - id: nameValueProvider
      type: OfficeOpenXml.FormulaParsing.INameValueProvider
    content.vb: Public Sub New(functionRepository As FunctionRepository, nameValueProvider As INameValueProvider)
  overload: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Lexer.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Lexer.#ctor(OfficeOpenXml.FormulaParsing.LexicalAnalysis.ISourceCodeTokenizer,OfficeOpenXml.FormulaParsing.LexicalAnalysis.ISyntacticAnalyzer)
  commentId: M:OfficeOpenXml.FormulaParsing.LexicalAnalysis.Lexer.#ctor(OfficeOpenXml.FormulaParsing.LexicalAnalysis.ISourceCodeTokenizer,OfficeOpenXml.FormulaParsing.LexicalAnalysis.ISyntacticAnalyzer)
  id: '#ctor(OfficeOpenXml.FormulaParsing.LexicalAnalysis.ISourceCodeTokenizer,OfficeOpenXml.FormulaParsing.LexicalAnalysis.ISyntacticAnalyzer)'
  parent: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Lexer
  langs:
  - csharp
  - vb
  name: Lexer(ISourceCodeTokenizer, ISyntacticAnalyzer)
  nameWithType: Lexer.Lexer(ISourceCodeTokenizer, ISyntacticAnalyzer)
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Lexer.Lexer(OfficeOpenXml.FormulaParsing.LexicalAnalysis.ISourceCodeTokenizer, OfficeOpenXml.FormulaParsing.LexicalAnalysis.ISyntacticAnalyzer)
  type: Constructor
  source:
    remote:
      path: src/EPPlus/FormulaParsing/LexicalAnalysis/Lexer.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: .ctor
    path: ../src/EPPlus/FormulaParsing/LexicalAnalysis/Lexer.cs
    startLine: 29
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  syntax:
    content: public Lexer(ISourceCodeTokenizer tokenizer, ISyntacticAnalyzer analyzer)
    parameters:
    - id: tokenizer
      type: OfficeOpenXml.FormulaParsing.LexicalAnalysis.ISourceCodeTokenizer
    - id: analyzer
      type: OfficeOpenXml.FormulaParsing.LexicalAnalysis.ISyntacticAnalyzer
    content.vb: Public Sub New(tokenizer As ISourceCodeTokenizer, analyzer As ISyntacticAnalyzer)
  overload: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Lexer.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Lexer.Tokenize(System.String)
  commentId: M:OfficeOpenXml.FormulaParsing.LexicalAnalysis.Lexer.Tokenize(System.String)
  id: Tokenize(System.String)
  parent: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Lexer
  langs:
  - csharp
  - vb
  name: Tokenize(String)
  nameWithType: Lexer.Tokenize(String)
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Lexer.Tokenize(System.String)
  type: Method
  source:
    remote:
      path: src/EPPlus/FormulaParsing/LexicalAnalysis/Lexer.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Tokenize
    path: ../src/EPPlus/FormulaParsing/LexicalAnalysis/Lexer.cs
    startLine: 37
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  syntax:
    content: public IEnumerable<Token> Tokenize(string input)
    parameters:
    - id: input
      type: System.String
    return:
      type: System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token}
    content.vb: Public Function Tokenize(input As String) As IEnumerable(Of Token)
  overload: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Lexer.Tokenize*
  implements:
  - OfficeOpenXml.FormulaParsing.LexicalAnalysis.ILexer.Tokenize(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Lexer.Tokenize(System.String,System.String)
  commentId: M:OfficeOpenXml.FormulaParsing.LexicalAnalysis.Lexer.Tokenize(System.String,System.String)
  id: Tokenize(System.String,System.String)
  parent: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Lexer
  langs:
  - csharp
  - vb
  name: Tokenize(String, String)
  nameWithType: Lexer.Tokenize(String, String)
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Lexer.Tokenize(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/EPPlus/FormulaParsing/LexicalAnalysis/Lexer.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Tokenize
    path: ../src/EPPlus/FormulaParsing/LexicalAnalysis/Lexer.cs
    startLine: 41
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  syntax:
    content: public IEnumerable<Token> Tokenize(string input, string worksheet)
    parameters:
    - id: input
      type: System.String
    - id: worksheet
      type: System.String
    return:
      type: System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token}
    content.vb: Public Function Tokenize(input As String, worksheet As String) As IEnumerable(Of Token)
  overload: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Lexer.Tokenize*
  implements:
  - OfficeOpenXml.FormulaParsing.LexicalAnalysis.ILexer.Tokenize(System.String,System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  commentId: N:OfficeOpenXml.FormulaParsing.LexicalAnalysis
  name: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  nameWithType: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.ILexer
  commentId: T:OfficeOpenXml.FormulaParsing.LexicalAnalysis.ILexer
  parent: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  name: ILexer
  nameWithType: ILexer
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.ILexer
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Lexer.#ctor*
  commentId: Overload:OfficeOpenXml.FormulaParsing.LexicalAnalysis.Lexer.#ctor
  name: Lexer
  nameWithType: Lexer.Lexer
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Lexer.Lexer
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionRepository
  commentId: T:OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionRepository
  parent: OfficeOpenXml.FormulaParsing.Excel.Functions
  name: FunctionRepository
  nameWithType: FunctionRepository
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions.FunctionRepository
- uid: OfficeOpenXml.FormulaParsing.INameValueProvider
  commentId: T:OfficeOpenXml.FormulaParsing.INameValueProvider
  parent: OfficeOpenXml.FormulaParsing
  name: INameValueProvider
  nameWithType: INameValueProvider
  fullName: OfficeOpenXml.FormulaParsing.INameValueProvider
- uid: OfficeOpenXml.FormulaParsing.Excel.Functions
  commentId: N:OfficeOpenXml.FormulaParsing.Excel.Functions
  name: OfficeOpenXml.FormulaParsing.Excel.Functions
  nameWithType: OfficeOpenXml.FormulaParsing.Excel.Functions
  fullName: OfficeOpenXml.FormulaParsing.Excel.Functions
- uid: OfficeOpenXml.FormulaParsing
  commentId: N:OfficeOpenXml.FormulaParsing
  name: OfficeOpenXml.FormulaParsing
  nameWithType: OfficeOpenXml.FormulaParsing
  fullName: OfficeOpenXml.FormulaParsing
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.ISourceCodeTokenizer
  commentId: T:OfficeOpenXml.FormulaParsing.LexicalAnalysis.ISourceCodeTokenizer
  parent: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  name: ISourceCodeTokenizer
  nameWithType: ISourceCodeTokenizer
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.ISourceCodeTokenizer
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.ISyntacticAnalyzer
  commentId: T:OfficeOpenXml.FormulaParsing.LexicalAnalysis.ISyntacticAnalyzer
  parent: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  name: ISyntacticAnalyzer
  nameWithType: ISyntacticAnalyzer
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.ISyntacticAnalyzer
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Lexer.Tokenize*
  commentId: Overload:OfficeOpenXml.FormulaParsing.LexicalAnalysis.Lexer.Tokenize
  name: Tokenize
  nameWithType: Lexer.Tokenize
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Lexer.Tokenize
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.ILexer.Tokenize(System.String)
  commentId: M:OfficeOpenXml.FormulaParsing.LexicalAnalysis.ILexer.Tokenize(System.String)
  parent: OfficeOpenXml.FormulaParsing.LexicalAnalysis.ILexer
  isExternal: true
  name: Tokenize(String)
  nameWithType: ILexer.Tokenize(String)
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.ILexer.Tokenize(System.String)
  spec.csharp:
  - uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.ILexer.Tokenize(System.String)
    name: Tokenize
    nameWithType: ILexer.Tokenize
    fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.ILexer.Tokenize
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.ILexer.Tokenize(System.String)
    name: Tokenize
    nameWithType: ILexer.Tokenize
    fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.ILexer.Tokenize
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token}
  commentId: T:System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Token>
  nameWithType: IEnumerable<Token>
  fullName: System.Collections.Generic.IEnumerable<OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token>
  nameWithType.vb: IEnumerable(Of Token)
  fullName.vb: System.Collections.Generic.IEnumerable(Of OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token)
  name.vb: IEnumerable(Of Token)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token
    name: Token
    nameWithType: Token
    fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token
    name: Token
    nameWithType: Token
    fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.ILexer.Tokenize(System.String,System.String)
  commentId: M:OfficeOpenXml.FormulaParsing.LexicalAnalysis.ILexer.Tokenize(System.String,System.String)
  parent: OfficeOpenXml.FormulaParsing.LexicalAnalysis.ILexer
  isExternal: true
  name: Tokenize(String, String)
  nameWithType: ILexer.Tokenize(String, String)
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.ILexer.Tokenize(System.String, System.String)
  spec.csharp:
  - uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.ILexer.Tokenize(System.String,System.String)
    name: Tokenize
    nameWithType: ILexer.Tokenize
    fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.ILexer.Tokenize
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.ILexer.Tokenize(System.String,System.String)
    name: Tokenize
    nameWithType: ILexer.Tokenize
    fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.ILexer.Tokenize
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
