### YamlMime:ManagedReference
items:
- uid: OfficeOpenXml.FormulaParsing.ExpressionGraph.IExpressionCompiler
  commentId: T:OfficeOpenXml.FormulaParsing.ExpressionGraph.IExpressionCompiler
  id: IExpressionCompiler
  parent: OfficeOpenXml.FormulaParsing.ExpressionGraph
  children:
  - OfficeOpenXml.FormulaParsing.ExpressionGraph.IExpressionCompiler.Compile(System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression})
  langs:
  - csharp
  - vb
  name: IExpressionCompiler
  nameWithType: IExpressionCompiler
  fullName: OfficeOpenXml.FormulaParsing.ExpressionGraph.IExpressionCompiler
  type: Interface
  source:
    remote:
      path: src/EPPlus/FormulaParsing/ExpressionGraph/IExpressionCompiler.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: IExpressionCompiler
    path: ../src/EPPlus/FormulaParsing/ExpressionGraph/IExpressionCompiler.cs
    startLine: 19
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.ExpressionGraph
  syntax:
    content: public interface IExpressionCompiler
    content.vb: Public Interface IExpressionCompiler
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: OfficeOpenXml.FormulaParsing.ExpressionGraph.IExpressionCompiler.Compile(System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression})
  commentId: M:OfficeOpenXml.FormulaParsing.ExpressionGraph.IExpressionCompiler.Compile(System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression})
  id: Compile(System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression})
  parent: OfficeOpenXml.FormulaParsing.ExpressionGraph.IExpressionCompiler
  langs:
  - csharp
  - vb
  name: Compile(IEnumerable<Expression>)
  nameWithType: IExpressionCompiler.Compile(IEnumerable<Expression>)
  fullName: OfficeOpenXml.FormulaParsing.ExpressionGraph.IExpressionCompiler.Compile(System.Collections.Generic.IEnumerable<OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression>)
  type: Method
  source:
    remote:
      path: src/EPPlus/FormulaParsing/ExpressionGraph/IExpressionCompiler.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Compile
    path: ../src/EPPlus/FormulaParsing/ExpressionGraph/IExpressionCompiler.cs
    startLine: 21
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.ExpressionGraph
  syntax:
    content: CompileResult Compile(IEnumerable<Expression> expressions)
    parameters:
    - id: expressions
      type: System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression}
    return:
      type: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult
    content.vb: Function Compile(expressions As IEnumerable(Of Expression)) As CompileResult
  overload: OfficeOpenXml.FormulaParsing.ExpressionGraph.IExpressionCompiler.Compile*
  nameWithType.vb: IExpressionCompiler.Compile(IEnumerable(Of Expression))
  fullName.vb: OfficeOpenXml.FormulaParsing.ExpressionGraph.IExpressionCompiler.Compile(System.Collections.Generic.IEnumerable(Of OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression))
  name.vb: Compile(IEnumerable(Of Expression))
references:
- uid: OfficeOpenXml.FormulaParsing.ExpressionGraph
  commentId: N:OfficeOpenXml.FormulaParsing.ExpressionGraph
  name: OfficeOpenXml.FormulaParsing.ExpressionGraph
  nameWithType: OfficeOpenXml.FormulaParsing.ExpressionGraph
  fullName: OfficeOpenXml.FormulaParsing.ExpressionGraph
- uid: OfficeOpenXml.FormulaParsing.ExpressionGraph.IExpressionCompiler.Compile*
  commentId: Overload:OfficeOpenXml.FormulaParsing.ExpressionGraph.IExpressionCompiler.Compile
  name: Compile
  nameWithType: IExpressionCompiler.Compile
  fullName: OfficeOpenXml.FormulaParsing.ExpressionGraph.IExpressionCompiler.Compile
- uid: System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression}
  commentId: T:System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Expression>
  nameWithType: IEnumerable<Expression>
  fullName: System.Collections.Generic.IEnumerable<OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression>
  nameWithType.vb: IEnumerable(Of Expression)
  fullName.vb: System.Collections.Generic.IEnumerable(Of OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression)
  name.vb: IEnumerable(Of Expression)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression
    name: Expression
    nameWithType: Expression
    fullName: OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression
    name: Expression
    nameWithType: Expression
    fullName: OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult
  commentId: T:OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult
  parent: OfficeOpenXml.FormulaParsing.ExpressionGraph
  name: CompileResult
  nameWithType: CompileResult
  fullName: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
