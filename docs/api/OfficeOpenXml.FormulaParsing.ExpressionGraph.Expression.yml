### YamlMime:ManagedReference
items:
- uid: OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression
  commentId: T:OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression
  id: Expression
  parent: OfficeOpenXml.FormulaParsing.ExpressionGraph
  children:
  - OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression.#ctor
  - OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression.#ctor(System.String)
  - OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression.AddChild(OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression)
  - OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression.Children
  - OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression.Compile
  - OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression.HasChildren
  - OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression.IgnoreCircularReference
  - OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression.IsGroupedExpression
  - OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression.MergeWithNext
  - OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression.Next
  - OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression.Operator
  - OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression.PrepareForNextChild
  - OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression.Prev
  langs:
  - csharp
  - vb
  name: Expression
  nameWithType: Expression
  fullName: OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression
  type: Class
  source:
    remote:
      path: src/EPPlus/FormulaParsing/ExpressionGraph/Expression.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Expression
    path: ../src/EPPlus/FormulaParsing/ExpressionGraph/Expression.cs
    startLine: 21
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.ExpressionGraph
  syntax:
    content: public abstract class Expression
    content.vb: Public MustInherit Class Expression
  inheritance:
  - System.Object
  derivedClasses:
  - OfficeOpenXml.FormulaParsing.ExpressionGraph.AtomicExpression
  - OfficeOpenXml.FormulaParsing.ExpressionGraph.EnumerableExpression
  - OfficeOpenXml.FormulaParsing.ExpressionGraph.ExcelErrorExpression
  - OfficeOpenXml.FormulaParsing.ExpressionGraph.ExcelRangeExpression
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression.Children
  commentId: P:OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression.Children
  id: Children
  parent: OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression
  langs:
  - csharp
  - vb
  name: Children
  nameWithType: Expression.Children
  fullName: OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression.Children
  type: Property
  source:
    remote:
      path: src/EPPlus/FormulaParsing/ExpressionGraph/Expression.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Children
    path: ../src/EPPlus/FormulaParsing/ExpressionGraph/Expression.cs
    startLine: 25
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.ExpressionGraph
  syntax:
    content: public IEnumerable<Expression> Children { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression}
    content.vb: Public ReadOnly Property Children As IEnumerable(Of Expression)
  overload: OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression.Children*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression.Next
  commentId: P:OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression.Next
  id: Next
  parent: OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression
  langs:
  - csharp
  - vb
  name: Next
  nameWithType: Expression.Next
  fullName: OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression.Next
  type: Property
  source:
    remote:
      path: src/EPPlus/FormulaParsing/ExpressionGraph/Expression.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Next
    path: ../src/EPPlus/FormulaParsing/ExpressionGraph/Expression.cs
    startLine: 26
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.ExpressionGraph
  syntax:
    content: public Expression Next { get; set; }
    parameters: []
    return:
      type: OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression
    content.vb: Public Property Next As Expression
  overload: OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression.Next*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression.Prev
  commentId: P:OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression.Prev
  id: Prev
  parent: OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression
  langs:
  - csharp
  - vb
  name: Prev
  nameWithType: Expression.Prev
  fullName: OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression.Prev
  type: Property
  source:
    remote:
      path: src/EPPlus/FormulaParsing/ExpressionGraph/Expression.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Prev
    path: ../src/EPPlus/FormulaParsing/ExpressionGraph/Expression.cs
    startLine: 27
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.ExpressionGraph
  syntax:
    content: public Expression Prev { get; set; }
    parameters: []
    return:
      type: OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression
    content.vb: Public Property Prev As Expression
  overload: OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression.Prev*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression.Operator
  commentId: P:OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression.Operator
  id: Operator
  parent: OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression
  langs:
  - csharp
  - vb
  name: Operator
  nameWithType: Expression.Operator
  fullName: OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression.Operator
  type: Property
  source:
    remote:
      path: src/EPPlus/FormulaParsing/ExpressionGraph/Expression.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Operator
    path: ../src/EPPlus/FormulaParsing/ExpressionGraph/Expression.cs
    startLine: 28
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.ExpressionGraph
  syntax:
    content: public IOperator Operator { get; set; }
    parameters: []
    return:
      type: OfficeOpenXml.FormulaParsing.Excel.Operators.IOperator
    content.vb: Public Property Operator As IOperator
  overload: OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression.Operator*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression.IsGroupedExpression
  commentId: P:OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression.IsGroupedExpression
  id: IsGroupedExpression
  parent: OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression
  langs:
  - csharp
  - vb
  name: IsGroupedExpression
  nameWithType: Expression.IsGroupedExpression
  fullName: OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression.IsGroupedExpression
  type: Property
  source:
    remote:
      path: src/EPPlus/FormulaParsing/ExpressionGraph/Expression.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: IsGroupedExpression
    path: ../src/EPPlus/FormulaParsing/ExpressionGraph/Expression.cs
    startLine: 29
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.ExpressionGraph
  syntax:
    content: public abstract bool IsGroupedExpression { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public MustOverride ReadOnly Property IsGroupedExpression As Boolean
  overload: OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression.IsGroupedExpression*
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression.IgnoreCircularReference
  commentId: P:OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression.IgnoreCircularReference
  id: IgnoreCircularReference
  parent: OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression
  langs:
  - csharp
  - vb
  name: IgnoreCircularReference
  nameWithType: Expression.IgnoreCircularReference
  fullName: OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression.IgnoreCircularReference
  type: Property
  source:
    remote:
      path: src/EPPlus/FormulaParsing/ExpressionGraph/Expression.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: IgnoreCircularReference
    path: ../src/EPPlus/FormulaParsing/ExpressionGraph/Expression.cs
    startLine: 33
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.ExpressionGraph
  summary: "\nIf set to true, <xref href=\"OfficeOpenXml.FormulaParsing.ExpressionGraph.ExcelAddressExpression\" data-throw-if-not-resolved=\"false\"></xref>s that has a circular reference to their cell will be ignored when compiled\n"
  example: []
  syntax:
    content: public virtual bool IgnoreCircularReference { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Overridable Property IgnoreCircularReference As Boolean
  overload: OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression.IgnoreCircularReference*
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
- uid: OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression.#ctor
  commentId: M:OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression.#ctor
  id: '#ctor'
  parent: OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression
  langs:
  - csharp
  - vb
  name: Expression()
  nameWithType: Expression.Expression()
  fullName: OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression.Expression()
  type: Constructor
  source:
    remote:
      path: src/EPPlus/FormulaParsing/ExpressionGraph/Expression.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: .ctor
    path: ../src/EPPlus/FormulaParsing/ExpressionGraph/Expression.cs
    startLine: 38
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.ExpressionGraph
  syntax:
    content: public Expression()
    content.vb: Public Sub New
  overload: OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression.#ctor(System.String)
  commentId: M:OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression
  langs:
  - csharp
  - vb
  name: Expression(String)
  nameWithType: Expression.Expression(String)
  fullName: OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression.Expression(System.String)
  type: Constructor
  source:
    remote:
      path: src/EPPlus/FormulaParsing/ExpressionGraph/Expression.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: .ctor
    path: ../src/EPPlus/FormulaParsing/ExpressionGraph/Expression.cs
    startLine: 43
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.ExpressionGraph
  syntax:
    content: public Expression(string expression)
    parameters:
    - id: expression
      type: System.String
    content.vb: Public Sub New(expression As String)
  overload: OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression.HasChildren
  commentId: P:OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression.HasChildren
  id: HasChildren
  parent: OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression
  langs:
  - csharp
  - vb
  name: HasChildren
  nameWithType: Expression.HasChildren
  fullName: OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression.HasChildren
  type: Property
  source:
    remote:
      path: src/EPPlus/FormulaParsing/ExpressionGraph/Expression.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: HasChildren
    path: ../src/EPPlus/FormulaParsing/ExpressionGraph/Expression.cs
    startLine: 49
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.ExpressionGraph
  syntax:
    content: public virtual bool HasChildren { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Overridable ReadOnly Property HasChildren As Boolean
  overload: OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression.HasChildren*
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression.PrepareForNextChild
  commentId: M:OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression.PrepareForNextChild
  id: PrepareForNextChild
  parent: OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression
  langs:
  - csharp
  - vb
  name: PrepareForNextChild()
  nameWithType: Expression.PrepareForNextChild()
  fullName: OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression.PrepareForNextChild()
  type: Method
  source:
    remote:
      path: src/EPPlus/FormulaParsing/ExpressionGraph/Expression.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: PrepareForNextChild
    path: ../src/EPPlus/FormulaParsing/ExpressionGraph/Expression.cs
    startLine: 54
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.ExpressionGraph
  syntax:
    content: public virtual Expression PrepareForNextChild()
    return:
      type: OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression
    content.vb: Public Overridable Function PrepareForNextChild As Expression
  overload: OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression.PrepareForNextChild*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression.AddChild(OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression)
  commentId: M:OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression.AddChild(OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression)
  id: AddChild(OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression)
  parent: OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression
  langs:
  - csharp
  - vb
  name: AddChild(Expression)
  nameWithType: Expression.AddChild(Expression)
  fullName: OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression.AddChild(OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression)
  type: Method
  source:
    remote:
      path: src/EPPlus/FormulaParsing/ExpressionGraph/Expression.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: AddChild
    path: ../src/EPPlus/FormulaParsing/ExpressionGraph/Expression.cs
    startLine: 59
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.ExpressionGraph
  syntax:
    content: public virtual Expression AddChild(Expression child)
    parameters:
    - id: child
      type: OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression
    return:
      type: OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression
    content.vb: Public Overridable Function AddChild(child As Expression) As Expression
  overload: OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression.AddChild*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression.MergeWithNext
  commentId: M:OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression.MergeWithNext
  id: MergeWithNext
  parent: OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression
  langs:
  - csharp
  - vb
  name: MergeWithNext()
  nameWithType: Expression.MergeWithNext()
  fullName: OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression.MergeWithNext()
  type: Method
  source:
    remote:
      path: src/EPPlus/FormulaParsing/ExpressionGraph/Expression.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: MergeWithNext
    path: ../src/EPPlus/FormulaParsing/ExpressionGraph/Expression.cs
    startLine: 71
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.ExpressionGraph
  syntax:
    content: public virtual Expression MergeWithNext()
    return:
      type: OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression
    content.vb: Public Overridable Function MergeWithNext As Expression
  overload: OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression.MergeWithNext*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression.Compile
  commentId: M:OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression.Compile
  id: Compile
  parent: OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression
  langs:
  - csharp
  - vb
  name: Compile()
  nameWithType: Expression.Compile()
  fullName: OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression.Compile()
  type: Method
  source:
    remote:
      path: src/EPPlus/FormulaParsing/ExpressionGraph/Expression.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Compile
    path: ../src/EPPlus/FormulaParsing/ExpressionGraph/Expression.cs
    startLine: 107
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.ExpressionGraph
  syntax:
    content: public abstract CompileResult Compile()
    return:
      type: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult
    content.vb: Public MustOverride Function Compile As CompileResult
  overload: OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression.Compile*
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
references:
- uid: OfficeOpenXml.FormulaParsing.ExpressionGraph
  commentId: N:OfficeOpenXml.FormulaParsing.ExpressionGraph
  name: OfficeOpenXml.FormulaParsing.ExpressionGraph
  nameWithType: OfficeOpenXml.FormulaParsing.ExpressionGraph
  fullName: OfficeOpenXml.FormulaParsing.ExpressionGraph
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression.Children*
  commentId: Overload:OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression.Children
  name: Children
  nameWithType: Expression.Children
  fullName: OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression.Children
- uid: System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression}
  commentId: T:System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Expression>
  nameWithType: IEnumerable<Expression>
  fullName: System.Collections.Generic.IEnumerable<OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression>
  nameWithType.vb: IEnumerable(Of Expression)
  fullName.vb: System.Collections.Generic.IEnumerable(Of OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression)
  name.vb: IEnumerable(Of Expression)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression
    name: Expression
    nameWithType: Expression
    fullName: OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression
    name: Expression
    nameWithType: Expression
    fullName: OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression.Next*
  commentId: Overload:OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression.Next
  name: Next
  nameWithType: Expression.Next
  fullName: OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression.Next
- uid: OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression
  commentId: T:OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression
  parent: OfficeOpenXml.FormulaParsing.ExpressionGraph
  name: Expression
  nameWithType: Expression
  fullName: OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression
- uid: OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression.Prev*
  commentId: Overload:OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression.Prev
  name: Prev
  nameWithType: Expression.Prev
  fullName: OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression.Prev
- uid: OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression.Operator*
  commentId: Overload:OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression.Operator
  name: Operator
  nameWithType: Expression.Operator
  fullName: OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression.Operator
- uid: OfficeOpenXml.FormulaParsing.Excel.Operators.IOperator
  commentId: T:OfficeOpenXml.FormulaParsing.Excel.Operators.IOperator
  parent: OfficeOpenXml.FormulaParsing.Excel.Operators
  name: IOperator
  nameWithType: IOperator
  fullName: OfficeOpenXml.FormulaParsing.Excel.Operators.IOperator
- uid: OfficeOpenXml.FormulaParsing.Excel.Operators
  commentId: N:OfficeOpenXml.FormulaParsing.Excel.Operators
  name: OfficeOpenXml.FormulaParsing.Excel.Operators
  nameWithType: OfficeOpenXml.FormulaParsing.Excel.Operators
  fullName: OfficeOpenXml.FormulaParsing.Excel.Operators
- uid: OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression.IsGroupedExpression*
  commentId: Overload:OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression.IsGroupedExpression
  name: IsGroupedExpression
  nameWithType: Expression.IsGroupedExpression
  fullName: OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression.IsGroupedExpression
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: OfficeOpenXml.FormulaParsing.ExpressionGraph.ExcelAddressExpression
  commentId: T:OfficeOpenXml.FormulaParsing.ExpressionGraph.ExcelAddressExpression
  isExternal: true
- uid: OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression.IgnoreCircularReference*
  commentId: Overload:OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression.IgnoreCircularReference
  name: IgnoreCircularReference
  nameWithType: Expression.IgnoreCircularReference
  fullName: OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression.IgnoreCircularReference
- uid: OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression.#ctor*
  commentId: Overload:OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression.#ctor
  name: Expression
  nameWithType: Expression.Expression
  fullName: OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression.Expression
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression.HasChildren*
  commentId: Overload:OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression.HasChildren
  name: HasChildren
  nameWithType: Expression.HasChildren
  fullName: OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression.HasChildren
- uid: OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression.PrepareForNextChild*
  commentId: Overload:OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression.PrepareForNextChild
  name: PrepareForNextChild
  nameWithType: Expression.PrepareForNextChild
  fullName: OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression.PrepareForNextChild
- uid: OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression.AddChild*
  commentId: Overload:OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression.AddChild
  name: AddChild
  nameWithType: Expression.AddChild
  fullName: OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression.AddChild
- uid: OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression.MergeWithNext*
  commentId: Overload:OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression.MergeWithNext
  name: MergeWithNext
  nameWithType: Expression.MergeWithNext
  fullName: OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression.MergeWithNext
- uid: OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression.Compile*
  commentId: Overload:OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression.Compile
  name: Compile
  nameWithType: Expression.Compile
  fullName: OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression.Compile
- uid: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult
  commentId: T:OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult
  parent: OfficeOpenXml.FormulaParsing.ExpressionGraph
  name: CompileResult
  nameWithType: CompileResult
  fullName: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult
