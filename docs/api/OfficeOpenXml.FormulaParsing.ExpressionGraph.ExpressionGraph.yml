### YamlMime:ManagedReference
items:
- uid: OfficeOpenXml.FormulaParsing.ExpressionGraph.ExpressionGraph
  commentId: T:OfficeOpenXml.FormulaParsing.ExpressionGraph.ExpressionGraph
  id: ExpressionGraph
  parent: OfficeOpenXml.FormulaParsing.ExpressionGraph
  children:
  - OfficeOpenXml.FormulaParsing.ExpressionGraph.ExpressionGraph.Add(OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression)
  - OfficeOpenXml.FormulaParsing.ExpressionGraph.ExpressionGraph.Current
  - OfficeOpenXml.FormulaParsing.ExpressionGraph.ExpressionGraph.Expressions
  - OfficeOpenXml.FormulaParsing.ExpressionGraph.ExpressionGraph.Remove(OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression)
  - OfficeOpenXml.FormulaParsing.ExpressionGraph.ExpressionGraph.Reset
  langs:
  - csharp
  - vb
  name: ExpressionGraph
  nameWithType: ExpressionGraph
  fullName: OfficeOpenXml.FormulaParsing.ExpressionGraph.ExpressionGraph
  type: Class
  source:
    remote:
      path: src/EPPlus/FormulaParsing/ExpressionGraph/ExpressionGraph.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: ExpressionGraph
    path: ../src/EPPlus/FormulaParsing/ExpressionGraph/ExpressionGraph.cs
    startLine: 19
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.ExpressionGraph
  syntax:
    content: public class ExpressionGraph
    content.vb: Public Class ExpressionGraph
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: OfficeOpenXml.FormulaParsing.ExpressionGraph.ExpressionGraph.Expressions
  commentId: P:OfficeOpenXml.FormulaParsing.ExpressionGraph.ExpressionGraph.Expressions
  id: Expressions
  parent: OfficeOpenXml.FormulaParsing.ExpressionGraph.ExpressionGraph
  langs:
  - csharp
  - vb
  name: Expressions
  nameWithType: ExpressionGraph.Expressions
  fullName: OfficeOpenXml.FormulaParsing.ExpressionGraph.ExpressionGraph.Expressions
  type: Property
  source:
    remote:
      path: src/EPPlus/FormulaParsing/ExpressionGraph/ExpressionGraph.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Expressions
    path: ../src/EPPlus/FormulaParsing/ExpressionGraph/ExpressionGraph.cs
    startLine: 22
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.ExpressionGraph
  syntax:
    content: public IEnumerable<Expression> Expressions { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression}
    content.vb: Public ReadOnly Property Expressions As IEnumerable(Of Expression)
  overload: OfficeOpenXml.FormulaParsing.ExpressionGraph.ExpressionGraph.Expressions*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: OfficeOpenXml.FormulaParsing.ExpressionGraph.ExpressionGraph.Current
  commentId: P:OfficeOpenXml.FormulaParsing.ExpressionGraph.ExpressionGraph.Current
  id: Current
  parent: OfficeOpenXml.FormulaParsing.ExpressionGraph.ExpressionGraph
  langs:
  - csharp
  - vb
  name: Current
  nameWithType: ExpressionGraph.Current
  fullName: OfficeOpenXml.FormulaParsing.ExpressionGraph.ExpressionGraph.Current
  type: Property
  source:
    remote:
      path: src/EPPlus/FormulaParsing/ExpressionGraph/ExpressionGraph.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Current
    path: ../src/EPPlus/FormulaParsing/ExpressionGraph/ExpressionGraph.cs
    startLine: 23
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.ExpressionGraph
  syntax:
    content: public Expression Current { get; }
    parameters: []
    return:
      type: OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression
    content.vb: Public ReadOnly Property Current As Expression
  overload: OfficeOpenXml.FormulaParsing.ExpressionGraph.ExpressionGraph.Current*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: OfficeOpenXml.FormulaParsing.ExpressionGraph.ExpressionGraph.Add(OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression)
  commentId: M:OfficeOpenXml.FormulaParsing.ExpressionGraph.ExpressionGraph.Add(OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression)
  id: Add(OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression)
  parent: OfficeOpenXml.FormulaParsing.ExpressionGraph.ExpressionGraph
  langs:
  - csharp
  - vb
  name: Add(Expression)
  nameWithType: ExpressionGraph.Add(Expression)
  fullName: OfficeOpenXml.FormulaParsing.ExpressionGraph.ExpressionGraph.Add(OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression)
  type: Method
  source:
    remote:
      path: src/EPPlus/FormulaParsing/ExpressionGraph/ExpressionGraph.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Add
    path: ../src/EPPlus/FormulaParsing/ExpressionGraph/ExpressionGraph.cs
    startLine: 25
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.ExpressionGraph
  syntax:
    content: public Expression Add(Expression expression)
    parameters:
    - id: expression
      type: OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression
    return:
      type: OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression
    content.vb: Public Function Add(expression As Expression) As Expression
  overload: OfficeOpenXml.FormulaParsing.ExpressionGraph.ExpressionGraph.Add*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.FormulaParsing.ExpressionGraph.ExpressionGraph.Reset
  commentId: M:OfficeOpenXml.FormulaParsing.ExpressionGraph.ExpressionGraph.Reset
  id: Reset
  parent: OfficeOpenXml.FormulaParsing.ExpressionGraph.ExpressionGraph
  langs:
  - csharp
  - vb
  name: Reset()
  nameWithType: ExpressionGraph.Reset()
  fullName: OfficeOpenXml.FormulaParsing.ExpressionGraph.ExpressionGraph.Reset()
  type: Method
  source:
    remote:
      path: src/EPPlus/FormulaParsing/ExpressionGraph/ExpressionGraph.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Reset
    path: ../src/EPPlus/FormulaParsing/ExpressionGraph/ExpressionGraph.cs
    startLine: 37
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.ExpressionGraph
  syntax:
    content: public void Reset()
    content.vb: Public Sub Reset
  overload: OfficeOpenXml.FormulaParsing.ExpressionGraph.ExpressionGraph.Reset*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.FormulaParsing.ExpressionGraph.ExpressionGraph.Remove(OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression)
  commentId: M:OfficeOpenXml.FormulaParsing.ExpressionGraph.ExpressionGraph.Remove(OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression)
  id: Remove(OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression)
  parent: OfficeOpenXml.FormulaParsing.ExpressionGraph.ExpressionGraph
  langs:
  - csharp
  - vb
  name: Remove(Expression)
  nameWithType: ExpressionGraph.Remove(Expression)
  fullName: OfficeOpenXml.FormulaParsing.ExpressionGraph.ExpressionGraph.Remove(OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression)
  type: Method
  source:
    remote:
      path: src/EPPlus/FormulaParsing/ExpressionGraph/ExpressionGraph.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Remove
    path: ../src/EPPlus/FormulaParsing/ExpressionGraph/ExpressionGraph.cs
    startLine: 43
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.ExpressionGraph
  syntax:
    content: public void Remove(Expression item)
    parameters:
    - id: item
      type: OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression
    content.vb: Public Sub Remove(item As Expression)
  overload: OfficeOpenXml.FormulaParsing.ExpressionGraph.ExpressionGraph.Remove*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: OfficeOpenXml.FormulaParsing.ExpressionGraph
  commentId: N:OfficeOpenXml.FormulaParsing.ExpressionGraph
  name: OfficeOpenXml.FormulaParsing.ExpressionGraph
  nameWithType: OfficeOpenXml.FormulaParsing.ExpressionGraph
  fullName: OfficeOpenXml.FormulaParsing.ExpressionGraph
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: OfficeOpenXml.FormulaParsing.ExpressionGraph.ExpressionGraph.Expressions*
  commentId: Overload:OfficeOpenXml.FormulaParsing.ExpressionGraph.ExpressionGraph.Expressions
  name: Expressions
  nameWithType: ExpressionGraph.Expressions
  fullName: OfficeOpenXml.FormulaParsing.ExpressionGraph.ExpressionGraph.Expressions
- uid: System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression}
  commentId: T:System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Expression>
  nameWithType: IEnumerable<Expression>
  fullName: System.Collections.Generic.IEnumerable<OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression>
  nameWithType.vb: IEnumerable(Of Expression)
  fullName.vb: System.Collections.Generic.IEnumerable(Of OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression)
  name.vb: IEnumerable(Of Expression)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression
    name: Expression
    nameWithType: Expression
    fullName: OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression
    name: Expression
    nameWithType: Expression
    fullName: OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: OfficeOpenXml.FormulaParsing.ExpressionGraph.ExpressionGraph.Current*
  commentId: Overload:OfficeOpenXml.FormulaParsing.ExpressionGraph.ExpressionGraph.Current
  name: Current
  nameWithType: ExpressionGraph.Current
  fullName: OfficeOpenXml.FormulaParsing.ExpressionGraph.ExpressionGraph.Current
- uid: OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression
  commentId: T:OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression
  parent: OfficeOpenXml.FormulaParsing.ExpressionGraph
  name: Expression
  nameWithType: Expression
  fullName: OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression
- uid: OfficeOpenXml.FormulaParsing.ExpressionGraph.ExpressionGraph.Add*
  commentId: Overload:OfficeOpenXml.FormulaParsing.ExpressionGraph.ExpressionGraph.Add
  name: Add
  nameWithType: ExpressionGraph.Add
  fullName: OfficeOpenXml.FormulaParsing.ExpressionGraph.ExpressionGraph.Add
- uid: OfficeOpenXml.FormulaParsing.ExpressionGraph.ExpressionGraph.Reset*
  commentId: Overload:OfficeOpenXml.FormulaParsing.ExpressionGraph.ExpressionGraph.Reset
  name: Reset
  nameWithType: ExpressionGraph.Reset
  fullName: OfficeOpenXml.FormulaParsing.ExpressionGraph.ExpressionGraph.Reset
- uid: OfficeOpenXml.FormulaParsing.ExpressionGraph.ExpressionGraph.Remove*
  commentId: Overload:OfficeOpenXml.FormulaParsing.ExpressionGraph.ExpressionGraph.Remove
  name: Remove
  nameWithType: ExpressionGraph.Remove
  fullName: OfficeOpenXml.FormulaParsing.ExpressionGraph.ExpressionGraph.Remove
