### YamlMime:ManagedReference
items:
- uid: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult
  commentId: T:OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult
  id: CompileResult
  parent: OfficeOpenXml.FormulaParsing.ExpressionGraph
  children:
  - OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.#ctor(OfficeOpenXml.eErrorType)
  - OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.#ctor(OfficeOpenXml.ExcelErrorValue)
  - OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.#ctor(System.Object,OfficeOpenXml.FormulaParsing.ExpressionGraph.DataType)
  - OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.#ctor(System.Object,OfficeOpenXml.FormulaParsing.ExpressionGraph.DataType,System.Int32)
  - OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.DataType
  - OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.Empty
  - OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.ExcelAddressReferenceId
  - OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.IsDateString
  - OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.IsHiddenCell
  - OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.IsNumeric
  - OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.IsNumericString
  - OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.IsPercentageString
  - OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.IsResultOfResolvedExcelRange
  - OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.IsResultOfSubtotal
  - OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.Result
  - OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.ResultNumeric
  - OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.ResultValue
  - OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.ZeroDecimal
  - OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.ZeroInt
  langs:
  - csharp
  - vb
  name: CompileResult
  nameWithType: CompileResult
  fullName: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult
  type: Class
  source:
    remote:
      path: src/EPPlus/FormulaParsing/ExpressionGraph/CompileResult.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: CompileResult
    path: ../src/EPPlus/FormulaParsing/ExpressionGraph/CompileResult.cs
    startLine: 24
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.ExpressionGraph
  syntax:
    content: public class CompileResult
    content.vb: Public Class CompileResult
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.Empty
  commentId: P:OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.Empty
  id: Empty
  parent: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult
  langs:
  - csharp
  - vb
  name: Empty
  nameWithType: CompileResult.Empty
  fullName: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.Empty
  type: Property
  source:
    remote:
      path: src/EPPlus/FormulaParsing/ExpressionGraph/CompileResult.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Empty
    path: ../src/EPPlus/FormulaParsing/ExpressionGraph/CompileResult.cs
    startLine: 33
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.ExpressionGraph
  summary: "\nReturns a CompileResult with a null value and data type set to DataType.Empty\n"
  example: []
  syntax:
    content: public static CompileResult Empty { get; }
    parameters: []
    return:
      type: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult
    content.vb: Public Shared ReadOnly Property Empty As CompileResult
  overload: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.Empty*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.ZeroDecimal
  commentId: P:OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.ZeroDecimal
  id: ZeroDecimal
  parent: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult
  langs:
  - csharp
  - vb
  name: ZeroDecimal
  nameWithType: CompileResult.ZeroDecimal
  fullName: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.ZeroDecimal
  type: Property
  source:
    remote:
      path: src/EPPlus/FormulaParsing/ExpressionGraph/CompileResult.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: ZeroDecimal
    path: ../src/EPPlus/FormulaParsing/ExpressionGraph/CompileResult.cs
    startLine: 41
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.ExpressionGraph
  summary: "\nReturns a CompileResult instance with a decimal value of 0.\n"
  example: []
  syntax:
    content: public static CompileResult ZeroDecimal { get; }
    parameters: []
    return:
      type: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult
    content.vb: Public Shared ReadOnly Property ZeroDecimal As CompileResult
  overload: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.ZeroDecimal*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.ZeroInt
  commentId: P:OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.ZeroInt
  id: ZeroInt
  parent: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult
  langs:
  - csharp
  - vb
  name: ZeroInt
  nameWithType: CompileResult.ZeroInt
  fullName: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.ZeroInt
  type: Property
  source:
    remote:
      path: src/EPPlus/FormulaParsing/ExpressionGraph/CompileResult.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: ZeroInt
    path: ../src/EPPlus/FormulaParsing/ExpressionGraph/CompileResult.cs
    startLine: 49
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.ExpressionGraph
  summary: "\nReturns a CompileResult instance with a integer value of 0.\n"
  example: []
  syntax:
    content: public static CompileResult ZeroInt { get; }
    parameters: []
    return:
      type: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult
    content.vb: Public Shared ReadOnly Property ZeroInt As CompileResult
  overload: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.ZeroInt*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.#ctor(System.Object,OfficeOpenXml.FormulaParsing.ExpressionGraph.DataType)
  commentId: M:OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.#ctor(System.Object,OfficeOpenXml.FormulaParsing.ExpressionGraph.DataType)
  id: '#ctor(System.Object,OfficeOpenXml.FormulaParsing.ExpressionGraph.DataType)'
  parent: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult
  langs:
  - csharp
  - vb
  name: CompileResult(Object, DataType)
  nameWithType: CompileResult.CompileResult(Object, DataType)
  fullName: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.CompileResult(System.Object, OfficeOpenXml.FormulaParsing.ExpressionGraph.DataType)
  type: Constructor
  source:
    remote:
      path: src/EPPlus/FormulaParsing/ExpressionGraph/CompileResult.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: .ctor
    path: ../src/EPPlus/FormulaParsing/ExpressionGraph/CompileResult.cs
    startLine: 56
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.ExpressionGraph
  syntax:
    content: public CompileResult(object result, DataType dataType)
    parameters:
    - id: result
      type: System.Object
    - id: dataType
      type: OfficeOpenXml.FormulaParsing.ExpressionGraph.DataType
    content.vb: Public Sub New(result As Object, dataType As DataType)
  overload: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.#ctor(System.Object,OfficeOpenXml.FormulaParsing.ExpressionGraph.DataType,System.Int32)
  commentId: M:OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.#ctor(System.Object,OfficeOpenXml.FormulaParsing.ExpressionGraph.DataType,System.Int32)
  id: '#ctor(System.Object,OfficeOpenXml.FormulaParsing.ExpressionGraph.DataType,System.Int32)'
  parent: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult
  langs:
  - csharp
  - vb
  name: CompileResult(Object, DataType, Int32)
  nameWithType: CompileResult.CompileResult(Object, DataType, Int32)
  fullName: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.CompileResult(System.Object, OfficeOpenXml.FormulaParsing.ExpressionGraph.DataType, System.Int32)
  type: Constructor
  source:
    remote:
      path: src/EPPlus/FormulaParsing/ExpressionGraph/CompileResult.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: .ctor
    path: ../src/EPPlus/FormulaParsing/ExpressionGraph/CompileResult.cs
    startLine: 61
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.ExpressionGraph
  syntax:
    content: public CompileResult(object result, DataType dataType, int excelAddressReferenceId)
    parameters:
    - id: result
      type: System.Object
    - id: dataType
      type: OfficeOpenXml.FormulaParsing.ExpressionGraph.DataType
    - id: excelAddressReferenceId
      type: System.Int32
    content.vb: Public Sub New(result As Object, dataType As DataType, excelAddressReferenceId As Integer)
  overload: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.#ctor(OfficeOpenXml.eErrorType)
  commentId: M:OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.#ctor(OfficeOpenXml.eErrorType)
  id: '#ctor(OfficeOpenXml.eErrorType)'
  parent: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult
  langs:
  - csharp
  - vb
  name: CompileResult(eErrorType)
  nameWithType: CompileResult.CompileResult(eErrorType)
  fullName: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.CompileResult(OfficeOpenXml.eErrorType)
  type: Constructor
  source:
    remote:
      path: src/EPPlus/FormulaParsing/ExpressionGraph/CompileResult.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: .ctor
    path: ../src/EPPlus/FormulaParsing/ExpressionGraph/CompileResult.cs
    startLine: 75
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.ExpressionGraph
  syntax:
    content: public CompileResult(eErrorType errorType)
    parameters:
    - id: errorType
      type: OfficeOpenXml.eErrorType
    content.vb: Public Sub New(errorType As eErrorType)
  overload: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.#ctor(OfficeOpenXml.ExcelErrorValue)
  commentId: M:OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.#ctor(OfficeOpenXml.ExcelErrorValue)
  id: '#ctor(OfficeOpenXml.ExcelErrorValue)'
  parent: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult
  langs:
  - csharp
  - vb
  name: CompileResult(ExcelErrorValue)
  nameWithType: CompileResult.CompileResult(ExcelErrorValue)
  fullName: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.CompileResult(OfficeOpenXml.ExcelErrorValue)
  type: Constructor
  source:
    remote:
      path: src/EPPlus/FormulaParsing/ExpressionGraph/CompileResult.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: .ctor
    path: ../src/EPPlus/FormulaParsing/ExpressionGraph/CompileResult.cs
    startLine: 81
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.ExpressionGraph
  syntax:
    content: public CompileResult(ExcelErrorValue errorValue)
    parameters:
    - id: errorValue
      type: OfficeOpenXml.ExcelErrorValue
    content.vb: Public Sub New(errorValue As ExcelErrorValue)
  overload: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.Result
  commentId: P:OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.Result
  id: Result
  parent: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult
  langs:
  - csharp
  - vb
  name: Result
  nameWithType: CompileResult.Result
  fullName: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.Result
  type: Property
  source:
    remote:
      path: src/EPPlus/FormulaParsing/ExpressionGraph/CompileResult.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Result
    path: ../src/EPPlus/FormulaParsing/ExpressionGraph/CompileResult.cs
    startLine: 88
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.ExpressionGraph
  syntax:
    content: public object Result { get; }
    parameters: []
    return:
      type: System.Object
    content.vb: Public ReadOnly Property Result As Object
  overload: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.Result*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.ResultValue
  commentId: P:OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.ResultValue
  id: ResultValue
  parent: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult
  langs:
  - csharp
  - vb
  name: ResultValue
  nameWithType: CompileResult.ResultValue
  fullName: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.ResultValue
  type: Property
  source:
    remote:
      path: src/EPPlus/FormulaParsing/ExpressionGraph/CompileResult.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: ResultValue
    path: ../src/EPPlus/FormulaParsing/ExpressionGraph/CompileResult.cs
    startLine: 94
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.ExpressionGraph
  syntax:
    content: public object ResultValue { get; }
    parameters: []
    return:
      type: System.Object
    content.vb: Public ReadOnly Property ResultValue As Object
  overload: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.ResultValue*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.ResultNumeric
  commentId: P:OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.ResultNumeric
  id: ResultNumeric
  parent: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult
  langs:
  - csharp
  - vb
  name: ResultNumeric
  nameWithType: CompileResult.ResultNumeric
  fullName: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.ResultNumeric
  type: Property
  source:
    remote:
      path: src/EPPlus/FormulaParsing/ExpressionGraph/CompileResult.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: ResultNumeric
    path: ../src/EPPlus/FormulaParsing/ExpressionGraph/CompileResult.cs
    startLine: 110
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.ExpressionGraph
  syntax:
    content: public double ResultNumeric { get; }
    parameters: []
    return:
      type: System.Double
    content.vb: Public ReadOnly Property ResultNumeric As Double
  overload: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.ResultNumeric*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.DataType
  commentId: P:OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.DataType
  id: DataType
  parent: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult
  langs:
  - csharp
  - vb
  name: DataType
  nameWithType: CompileResult.DataType
  fullName: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.DataType
  type: Property
  source:
    remote:
      path: src/EPPlus/FormulaParsing/ExpressionGraph/CompileResult.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: DataType
    path: ../src/EPPlus/FormulaParsing/ExpressionGraph/CompileResult.cs
    startLine: 156
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.ExpressionGraph
  syntax:
    content: public DataType DataType { get; }
    parameters: []
    return:
      type: OfficeOpenXml.FormulaParsing.ExpressionGraph.DataType
    content.vb: Public ReadOnly Property DataType As DataType
  overload: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.DataType*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.IsNumeric
  commentId: P:OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.IsNumeric
  id: IsNumeric
  parent: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult
  langs:
  - csharp
  - vb
  name: IsNumeric
  nameWithType: CompileResult.IsNumeric
  fullName: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.IsNumeric
  type: Property
  source:
    remote:
      path: src/EPPlus/FormulaParsing/ExpressionGraph/CompileResult.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: IsNumeric
    path: ../src/EPPlus/FormulaParsing/ExpressionGraph/CompileResult.cs
    startLine: 162
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.ExpressionGraph
  syntax:
    content: public bool IsNumeric { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsNumeric As Boolean
  overload: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.IsNumeric*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.IsNumericString
  commentId: P:OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.IsNumericString
  id: IsNumericString
  parent: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult
  langs:
  - csharp
  - vb
  name: IsNumericString
  nameWithType: CompileResult.IsNumericString
  fullName: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.IsNumericString
  type: Property
  source:
    remote:
      path: src/EPPlus/FormulaParsing/ExpressionGraph/CompileResult.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: IsNumericString
    path: ../src/EPPlus/FormulaParsing/ExpressionGraph/CompileResult.cs
    startLine: 170
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.ExpressionGraph
  syntax:
    content: public bool IsNumericString { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsNumericString As Boolean
  overload: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.IsNumericString*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.IsPercentageString
  commentId: P:OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.IsPercentageString
  id: IsPercentageString
  parent: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult
  langs:
  - csharp
  - vb
  name: IsPercentageString
  nameWithType: CompileResult.IsPercentageString
  fullName: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.IsPercentageString
  type: Property
  source:
    remote:
      path: src/EPPlus/FormulaParsing/ExpressionGraph/CompileResult.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: IsPercentageString
    path: ../src/EPPlus/FormulaParsing/ExpressionGraph/CompileResult.cs
    startLine: 183
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.ExpressionGraph
  syntax:
    content: public bool IsPercentageString { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsPercentageString As Boolean
  overload: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.IsPercentageString*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.IsDateString
  commentId: P:OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.IsDateString
  id: IsDateString
  parent: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult
  langs:
  - csharp
  - vb
  name: IsDateString
  nameWithType: CompileResult.IsDateString
  fullName: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.IsDateString
  type: Property
  source:
    remote:
      path: src/EPPlus/FormulaParsing/ExpressionGraph/CompileResult.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: IsDateString
    path: ../src/EPPlus/FormulaParsing/ExpressionGraph/CompileResult.cs
    startLine: 197
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.ExpressionGraph
  syntax:
    content: public bool IsDateString { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsDateString As Boolean
  overload: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.IsDateString*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.IsResultOfSubtotal
  commentId: P:OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.IsResultOfSubtotal
  id: IsResultOfSubtotal
  parent: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult
  langs:
  - csharp
  - vb
  name: IsResultOfSubtotal
  nameWithType: CompileResult.IsResultOfSubtotal
  fullName: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.IsResultOfSubtotal
  type: Property
  source:
    remote:
      path: src/EPPlus/FormulaParsing/ExpressionGraph/CompileResult.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: IsResultOfSubtotal
    path: ../src/EPPlus/FormulaParsing/ExpressionGraph/CompileResult.cs
    startLine: 210
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.ExpressionGraph
  syntax:
    content: public bool IsResultOfSubtotal { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property IsResultOfSubtotal As Boolean
  overload: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.IsResultOfSubtotal*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.IsHiddenCell
  commentId: P:OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.IsHiddenCell
  id: IsHiddenCell
  parent: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult
  langs:
  - csharp
  - vb
  name: IsHiddenCell
  nameWithType: CompileResult.IsHiddenCell
  fullName: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.IsHiddenCell
  type: Property
  source:
    remote:
      path: src/EPPlus/FormulaParsing/ExpressionGraph/CompileResult.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: IsHiddenCell
    path: ../src/EPPlus/FormulaParsing/ExpressionGraph/CompileResult.cs
    startLine: 212
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.ExpressionGraph
  syntax:
    content: public bool IsHiddenCell { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property IsHiddenCell As Boolean
  overload: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.IsHiddenCell*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.ExcelAddressReferenceId
  commentId: P:OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.ExcelAddressReferenceId
  id: ExcelAddressReferenceId
  parent: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult
  langs:
  - csharp
  - vb
  name: ExcelAddressReferenceId
  nameWithType: CompileResult.ExcelAddressReferenceId
  fullName: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.ExcelAddressReferenceId
  type: Property
  source:
    remote:
      path: src/EPPlus/FormulaParsing/ExpressionGraph/CompileResult.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: ExcelAddressReferenceId
    path: ../src/EPPlus/FormulaParsing/ExpressionGraph/CompileResult.cs
    startLine: 214
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.ExpressionGraph
  syntax:
    content: public int ExcelAddressReferenceId { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Property ExcelAddressReferenceId As Integer
  overload: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.ExcelAddressReferenceId*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.IsResultOfResolvedExcelRange
  commentId: P:OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.IsResultOfResolvedExcelRange
  id: IsResultOfResolvedExcelRange
  parent: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult
  langs:
  - csharp
  - vb
  name: IsResultOfResolvedExcelRange
  nameWithType: CompileResult.IsResultOfResolvedExcelRange
  fullName: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.IsResultOfResolvedExcelRange
  type: Property
  source:
    remote:
      path: src/EPPlus/FormulaParsing/ExpressionGraph/CompileResult.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: IsResultOfResolvedExcelRange
    path: ../src/EPPlus/FormulaParsing/ExpressionGraph/CompileResult.cs
    startLine: 216
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.ExpressionGraph
  syntax:
    content: public bool IsResultOfResolvedExcelRange { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsResultOfResolvedExcelRange As Boolean
  overload: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.IsResultOfResolvedExcelRange*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: OfficeOpenXml.FormulaParsing.ExpressionGraph
  commentId: N:OfficeOpenXml.FormulaParsing.ExpressionGraph
  name: OfficeOpenXml.FormulaParsing.ExpressionGraph
  nameWithType: OfficeOpenXml.FormulaParsing.ExpressionGraph
  fullName: OfficeOpenXml.FormulaParsing.ExpressionGraph
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.Empty*
  commentId: Overload:OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.Empty
  name: Empty
  nameWithType: CompileResult.Empty
  fullName: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.Empty
- uid: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult
  commentId: T:OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult
  parent: OfficeOpenXml.FormulaParsing.ExpressionGraph
  name: CompileResult
  nameWithType: CompileResult
  fullName: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult
- uid: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.ZeroDecimal*
  commentId: Overload:OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.ZeroDecimal
  name: ZeroDecimal
  nameWithType: CompileResult.ZeroDecimal
  fullName: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.ZeroDecimal
- uid: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.ZeroInt*
  commentId: Overload:OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.ZeroInt
  name: ZeroInt
  nameWithType: CompileResult.ZeroInt
  fullName: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.ZeroInt
- uid: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.#ctor*
  commentId: Overload:OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.#ctor
  name: CompileResult
  nameWithType: CompileResult.CompileResult
  fullName: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.CompileResult
- uid: OfficeOpenXml.FormulaParsing.ExpressionGraph.DataType
  commentId: T:OfficeOpenXml.FormulaParsing.ExpressionGraph.DataType
  parent: OfficeOpenXml.FormulaParsing.ExpressionGraph
  name: DataType
  nameWithType: DataType
  fullName: OfficeOpenXml.FormulaParsing.ExpressionGraph.DataType
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: OfficeOpenXml.eErrorType
  commentId: T:OfficeOpenXml.eErrorType
  parent: OfficeOpenXml
  name: eErrorType
  nameWithType: eErrorType
  fullName: OfficeOpenXml.eErrorType
- uid: OfficeOpenXml
  commentId: N:OfficeOpenXml
  name: OfficeOpenXml
  nameWithType: OfficeOpenXml
  fullName: OfficeOpenXml
- uid: OfficeOpenXml.ExcelErrorValue
  commentId: T:OfficeOpenXml.ExcelErrorValue
  parent: OfficeOpenXml
  name: ExcelErrorValue
  nameWithType: ExcelErrorValue
  fullName: OfficeOpenXml.ExcelErrorValue
- uid: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.Result*
  commentId: Overload:OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.Result
  name: Result
  nameWithType: CompileResult.Result
  fullName: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.Result
- uid: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.ResultValue*
  commentId: Overload:OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.ResultValue
  name: ResultValue
  nameWithType: CompileResult.ResultValue
  fullName: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.ResultValue
- uid: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.ResultNumeric*
  commentId: Overload:OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.ResultNumeric
  name: ResultNumeric
  nameWithType: CompileResult.ResultNumeric
  fullName: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.ResultNumeric
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.DataType*
  commentId: Overload:OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.DataType
  name: DataType
  nameWithType: CompileResult.DataType
  fullName: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.DataType
- uid: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.IsNumeric*
  commentId: Overload:OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.IsNumeric
  name: IsNumeric
  nameWithType: CompileResult.IsNumeric
  fullName: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.IsNumeric
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.IsNumericString*
  commentId: Overload:OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.IsNumericString
  name: IsNumericString
  nameWithType: CompileResult.IsNumericString
  fullName: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.IsNumericString
- uid: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.IsPercentageString*
  commentId: Overload:OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.IsPercentageString
  name: IsPercentageString
  nameWithType: CompileResult.IsPercentageString
  fullName: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.IsPercentageString
- uid: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.IsDateString*
  commentId: Overload:OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.IsDateString
  name: IsDateString
  nameWithType: CompileResult.IsDateString
  fullName: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.IsDateString
- uid: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.IsResultOfSubtotal*
  commentId: Overload:OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.IsResultOfSubtotal
  name: IsResultOfSubtotal
  nameWithType: CompileResult.IsResultOfSubtotal
  fullName: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.IsResultOfSubtotal
- uid: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.IsHiddenCell*
  commentId: Overload:OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.IsHiddenCell
  name: IsHiddenCell
  nameWithType: CompileResult.IsHiddenCell
  fullName: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.IsHiddenCell
- uid: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.ExcelAddressReferenceId*
  commentId: Overload:OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.ExcelAddressReferenceId
  name: ExcelAddressReferenceId
  nameWithType: CompileResult.ExcelAddressReferenceId
  fullName: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.ExcelAddressReferenceId
- uid: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.IsResultOfResolvedExcelRange*
  commentId: Overload:OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.IsResultOfResolvedExcelRange
  name: IsResultOfResolvedExcelRange
  nameWithType: CompileResult.IsResultOfResolvedExcelRange
  fullName: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult.IsResultOfResolvedExcelRange
