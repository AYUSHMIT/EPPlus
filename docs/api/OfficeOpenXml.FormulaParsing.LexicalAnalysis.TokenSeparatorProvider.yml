### YamlMime:ManagedReference
items:
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenSeparatorProvider
  commentId: T:OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenSeparatorProvider
  id: TokenSeparatorProvider
  parent: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  children:
  - OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenSeparatorProvider.GetToken(System.String)
  - OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenSeparatorProvider.Instance
  - OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenSeparatorProvider.IsOperator(System.String)
  - OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenSeparatorProvider.IsPossibleLastPartOfMultipleCharOperator(System.String)
  - OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenSeparatorProvider.OfficeOpenXml#FormulaParsing#LexicalAnalysis#ITokenSeparatorProvider#Tokens
  langs:
  - csharp
  - vb
  name: TokenSeparatorProvider
  nameWithType: TokenSeparatorProvider
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenSeparatorProvider
  type: Class
  source:
    remote:
      path: src/EPPlus/FormulaParsing/LexicalAnalysis/TokenSeparatorProvider.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: TokenSeparatorProvider
    path: ../src/EPPlus/FormulaParsing/LexicalAnalysis/TokenSeparatorProvider.cs
    startLine: 20
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  syntax:
    content: 'public class TokenSeparatorProvider : ITokenSeparatorProvider'
    content.vb: >-
      Public Class TokenSeparatorProvider
          Implements ITokenSeparatorProvider
  inheritance:
  - System.Object
  implements:
  - OfficeOpenXml.FormulaParsing.LexicalAnalysis.ITokenSeparatorProvider
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenSeparatorProvider.OfficeOpenXml#FormulaParsing#LexicalAnalysis#ITokenSeparatorProvider#Tokens
  commentId: P:OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenSeparatorProvider.OfficeOpenXml#FormulaParsing#LexicalAnalysis#ITokenSeparatorProvider#Tokens
  id: OfficeOpenXml#FormulaParsing#LexicalAnalysis#ITokenSeparatorProvider#Tokens
  isEii: true
  parent: OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenSeparatorProvider
  langs:
  - csharp
  - vb
  name: ITokenSeparatorProvider.Tokens
  nameWithType: TokenSeparatorProvider.ITokenSeparatorProvider.Tokens
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenSeparatorProvider.OfficeOpenXml.FormulaParsing.LexicalAnalysis.ITokenSeparatorProvider.Tokens
  type: Property
  source:
    remote:
      path: src/EPPlus/FormulaParsing/LexicalAnalysis/TokenSeparatorProvider.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: OfficeOpenXml.FormulaParsing.LexicalAnalysis.ITokenSeparatorProvider.Tokens
    path: ../src/EPPlus/FormulaParsing/LexicalAnalysis/TokenSeparatorProvider.cs
    startLine: 53
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  syntax:
    content: IDictionary<string, Token> ITokenSeparatorProvider.Tokens { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IDictionary{System.String,OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token}
    content.vb: ReadOnly WriteOnly Property OfficeOpenXml.FormulaParsing.LexicalAnalysis.ITokenSeparatorProvider.Tokens As IDictionary(Of String, Token) Implements ITokenSeparatorProvider.Tokens
  overload: OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenSeparatorProvider.OfficeOpenXml#FormulaParsing#LexicalAnalysis#ITokenSeparatorProvider#Tokens*
  implements:
  - OfficeOpenXml.FormulaParsing.LexicalAnalysis.ITokenSeparatorProvider.Tokens
  nameWithType.vb: TokenSeparatorProvider.OfficeOpenXml.FormulaParsing.LexicalAnalysis.ITokenSeparatorProvider.Tokens
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: OfficeOpenXml.FormulaParsing.LexicalAnalysis.ITokenSeparatorProvider.Tokens
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenSeparatorProvider.IsOperator(System.String)
  commentId: M:OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenSeparatorProvider.IsOperator(System.String)
  id: IsOperator(System.String)
  parent: OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenSeparatorProvider
  langs:
  - csharp
  - vb
  name: IsOperator(String)
  nameWithType: TokenSeparatorProvider.IsOperator(String)
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenSeparatorProvider.IsOperator(System.String)
  type: Method
  source:
    remote:
      path: src/EPPlus/FormulaParsing/LexicalAnalysis/TokenSeparatorProvider.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: IsOperator
    path: ../src/EPPlus/FormulaParsing/LexicalAnalysis/TokenSeparatorProvider.cs
    startLine: 63
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  summary: "\nReturns true if the item is an operator, otherwise false.\n"
  example: []
  syntax:
    content: public bool IsOperator(string item)
    parameters:
    - id: item
      type: System.String
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Function IsOperator(item As String) As Boolean
  overload: OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenSeparatorProvider.IsOperator*
  implements:
  - OfficeOpenXml.FormulaParsing.LexicalAnalysis.ITokenSeparatorProvider.IsOperator(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenSeparatorProvider.IsPossibleLastPartOfMultipleCharOperator(System.String)
  commentId: M:OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenSeparatorProvider.IsPossibleLastPartOfMultipleCharOperator(System.String)
  id: IsPossibleLastPartOfMultipleCharOperator(System.String)
  parent: OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenSeparatorProvider
  langs:
  - csharp
  - vb
  name: IsPossibleLastPartOfMultipleCharOperator(String)
  nameWithType: TokenSeparatorProvider.IsPossibleLastPartOfMultipleCharOperator(String)
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenSeparatorProvider.IsPossibleLastPartOfMultipleCharOperator(System.String)
  type: Method
  source:
    remote:
      path: src/EPPlus/FormulaParsing/LexicalAnalysis/TokenSeparatorProvider.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: IsPossibleLastPartOfMultipleCharOperator
    path: ../src/EPPlus/FormulaParsing/LexicalAnalysis/TokenSeparatorProvider.cs
    startLine: 81
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  summary: "\nReturns true if the <code data-dev-comment-type=\"paramref\" class=\"paramref\">part</code> could be part of a multichar operator, such as != or &lt;>\n"
  example: []
  syntax:
    content: public bool IsPossibleLastPartOfMultipleCharOperator(string part)
    parameters:
    - id: part
      type: System.String
      description: ''
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Function IsPossibleLastPartOfMultipleCharOperator(part As String) As Boolean
  overload: OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenSeparatorProvider.IsPossibleLastPartOfMultipleCharOperator*
  implements:
  - OfficeOpenXml.FormulaParsing.LexicalAnalysis.ITokenSeparatorProvider.IsPossibleLastPartOfMultipleCharOperator(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenSeparatorProvider.GetToken(System.String)
  commentId: M:OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenSeparatorProvider.GetToken(System.String)
  id: GetToken(System.String)
  parent: OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenSeparatorProvider
  langs:
  - csharp
  - vb
  name: GetToken(String)
  nameWithType: TokenSeparatorProvider.GetToken(String)
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenSeparatorProvider.GetToken(System.String)
  type: Method
  source:
    remote:
      path: src/EPPlus/FormulaParsing/LexicalAnalysis/TokenSeparatorProvider.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: GetToken
    path: ../src/EPPlus/FormulaParsing/LexicalAnalysis/TokenSeparatorProvider.cs
    startLine: 91
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  summary: "\nReturns a separator <xref href=\"OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token\" data-throw-if-not-resolved=\"false\"></xref> by its string representation.\n"
  example: []
  syntax:
    content: public Token? GetToken(string candidate)
    parameters:
    - id: candidate
      type: System.String
      description: The separator candidate
    return:
      type: System.Nullable{OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token}
      description: A <xref href="OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token" data-throw-if-not-resolved="false"></xref> instance or null/default(Token?)
    content.vb: Public Function GetToken(candidate As String) As Token?
  overload: OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenSeparatorProvider.GetToken*
  implements:
  - OfficeOpenXml.FormulaParsing.LexicalAnalysis.ITokenSeparatorProvider.GetToken(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenSeparatorProvider.Instance
  commentId: P:OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenSeparatorProvider.Instance
  id: Instance
  parent: OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenSeparatorProvider
  langs:
  - csharp
  - vb
  name: Instance
  nameWithType: TokenSeparatorProvider.Instance
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenSeparatorProvider.Instance
  type: Property
  source:
    remote:
      path: src/EPPlus/FormulaParsing/LexicalAnalysis/TokenSeparatorProvider.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Instance
    path: ../src/EPPlus/FormulaParsing/LexicalAnalysis/TokenSeparatorProvider.cs
    startLine: 100
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  summary: "\nInstance of the <xref href=\"OfficeOpenXml.FormulaParsing.LexicalAnalysis.ITokenSeparatorProvider\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public static ITokenSeparatorProvider Instance { get; }
    parameters: []
    return:
      type: OfficeOpenXml.FormulaParsing.LexicalAnalysis.ITokenSeparatorProvider
    content.vb: Public Shared ReadOnly Property Instance As ITokenSeparatorProvider
  overload: OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenSeparatorProvider.Instance*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
references:
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  commentId: N:OfficeOpenXml.FormulaParsing.LexicalAnalysis
  name: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  nameWithType: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.ITokenSeparatorProvider
  commentId: T:OfficeOpenXml.FormulaParsing.LexicalAnalysis.ITokenSeparatorProvider
  parent: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  name: ITokenSeparatorProvider
  nameWithType: ITokenSeparatorProvider
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.ITokenSeparatorProvider
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenSeparatorProvider.OfficeOpenXml#FormulaParsing#LexicalAnalysis#ITokenSeparatorProvider#Tokens*
  commentId: Overload:OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenSeparatorProvider.OfficeOpenXml#FormulaParsing#LexicalAnalysis#ITokenSeparatorProvider#Tokens
  name: ITokenSeparatorProvider.Tokens
  nameWithType: TokenSeparatorProvider.ITokenSeparatorProvider.Tokens
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenSeparatorProvider.OfficeOpenXml.FormulaParsing.LexicalAnalysis.ITokenSeparatorProvider.Tokens
  nameWithType.vb: TokenSeparatorProvider.OfficeOpenXml.FormulaParsing.LexicalAnalysis.ITokenSeparatorProvider.Tokens
  name.vb: OfficeOpenXml.FormulaParsing.LexicalAnalysis.ITokenSeparatorProvider.Tokens
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.ITokenSeparatorProvider.Tokens
  commentId: P:OfficeOpenXml.FormulaParsing.LexicalAnalysis.ITokenSeparatorProvider.Tokens
  parent: OfficeOpenXml.FormulaParsing.LexicalAnalysis.ITokenSeparatorProvider
  name: Tokens
  nameWithType: ITokenSeparatorProvider.Tokens
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.ITokenSeparatorProvider.Tokens
- uid: System.Collections.Generic.IDictionary{System.String,OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token}
  commentId: T:System.Collections.Generic.IDictionary{System.String,OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<String, Token>
  nameWithType: IDictionary<String, Token>
  fullName: System.Collections.Generic.IDictionary<System.String, OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token>
  nameWithType.vb: IDictionary(Of String, Token)
  fullName.vb: System.Collections.Generic.IDictionary(Of System.String, OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token)
  name.vb: IDictionary(Of String, Token)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token
    name: Token
    nameWithType: Token
    fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token
    name: Token
    nameWithType: Token
    fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenSeparatorProvider.IsOperator*
  commentId: Overload:OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenSeparatorProvider.IsOperator
  name: IsOperator
  nameWithType: TokenSeparatorProvider.IsOperator
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenSeparatorProvider.IsOperator
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.ITokenSeparatorProvider.IsOperator(System.String)
  commentId: M:OfficeOpenXml.FormulaParsing.LexicalAnalysis.ITokenSeparatorProvider.IsOperator(System.String)
  parent: OfficeOpenXml.FormulaParsing.LexicalAnalysis.ITokenSeparatorProvider
  isExternal: true
  name: IsOperator(String)
  nameWithType: ITokenSeparatorProvider.IsOperator(String)
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.ITokenSeparatorProvider.IsOperator(System.String)
  spec.csharp:
  - uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.ITokenSeparatorProvider.IsOperator(System.String)
    name: IsOperator
    nameWithType: ITokenSeparatorProvider.IsOperator
    fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.ITokenSeparatorProvider.IsOperator
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.ITokenSeparatorProvider.IsOperator(System.String)
    name: IsOperator
    nameWithType: ITokenSeparatorProvider.IsOperator
    fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.ITokenSeparatorProvider.IsOperator
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenSeparatorProvider.IsPossibleLastPartOfMultipleCharOperator*
  commentId: Overload:OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenSeparatorProvider.IsPossibleLastPartOfMultipleCharOperator
  name: IsPossibleLastPartOfMultipleCharOperator
  nameWithType: TokenSeparatorProvider.IsPossibleLastPartOfMultipleCharOperator
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenSeparatorProvider.IsPossibleLastPartOfMultipleCharOperator
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.ITokenSeparatorProvider.IsPossibleLastPartOfMultipleCharOperator(System.String)
  commentId: M:OfficeOpenXml.FormulaParsing.LexicalAnalysis.ITokenSeparatorProvider.IsPossibleLastPartOfMultipleCharOperator(System.String)
  parent: OfficeOpenXml.FormulaParsing.LexicalAnalysis.ITokenSeparatorProvider
  isExternal: true
  name: IsPossibleLastPartOfMultipleCharOperator(String)
  nameWithType: ITokenSeparatorProvider.IsPossibleLastPartOfMultipleCharOperator(String)
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.ITokenSeparatorProvider.IsPossibleLastPartOfMultipleCharOperator(System.String)
  spec.csharp:
  - uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.ITokenSeparatorProvider.IsPossibleLastPartOfMultipleCharOperator(System.String)
    name: IsPossibleLastPartOfMultipleCharOperator
    nameWithType: ITokenSeparatorProvider.IsPossibleLastPartOfMultipleCharOperator
    fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.ITokenSeparatorProvider.IsPossibleLastPartOfMultipleCharOperator
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.ITokenSeparatorProvider.IsPossibleLastPartOfMultipleCharOperator(System.String)
    name: IsPossibleLastPartOfMultipleCharOperator
    nameWithType: ITokenSeparatorProvider.IsPossibleLastPartOfMultipleCharOperator
    fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.ITokenSeparatorProvider.IsPossibleLastPartOfMultipleCharOperator
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token
  commentId: T:OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token
  parent: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  name: Token
  nameWithType: Token
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenSeparatorProvider.GetToken*
  commentId: Overload:OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenSeparatorProvider.GetToken
  name: GetToken
  nameWithType: TokenSeparatorProvider.GetToken
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenSeparatorProvider.GetToken
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.ITokenSeparatorProvider.GetToken(System.String)
  commentId: M:OfficeOpenXml.FormulaParsing.LexicalAnalysis.ITokenSeparatorProvider.GetToken(System.String)
  parent: OfficeOpenXml.FormulaParsing.LexicalAnalysis.ITokenSeparatorProvider
  isExternal: true
  name: GetToken(String)
  nameWithType: ITokenSeparatorProvider.GetToken(String)
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.ITokenSeparatorProvider.GetToken(System.String)
  spec.csharp:
  - uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.ITokenSeparatorProvider.GetToken(System.String)
    name: GetToken
    nameWithType: ITokenSeparatorProvider.GetToken
    fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.ITokenSeparatorProvider.GetToken
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.ITokenSeparatorProvider.GetToken(System.String)
    name: GetToken
    nameWithType: ITokenSeparatorProvider.GetToken
    fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.ITokenSeparatorProvider.GetToken
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable{OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token}
  commentId: T:System.Nullable{OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Token>
  nameWithType: Nullable<Token>
  fullName: System.Nullable<OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token>
  nameWithType.vb: Nullable(Of Token)
  fullName.vb: System.Nullable(Of OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token)
  name.vb: Nullable(Of Token)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token
    name: Token
    nameWithType: Token
    fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token
    name: Token
    nameWithType: Token
    fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenSeparatorProvider.Instance*
  commentId: Overload:OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenSeparatorProvider.Instance
  name: Instance
  nameWithType: TokenSeparatorProvider.Instance
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenSeparatorProvider.Instance
