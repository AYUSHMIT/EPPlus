### YamlMime:ManagedReference
items:
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.ITokenFactory
  commentId: T:OfficeOpenXml.FormulaParsing.LexicalAnalysis.ITokenFactory
  id: ITokenFactory
  parent: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  children:
  - OfficeOpenXml.FormulaParsing.LexicalAnalysis.ITokenFactory.Create(System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token},System.String)
  - OfficeOpenXml.FormulaParsing.LexicalAnalysis.ITokenFactory.Create(System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token},System.String,System.String)
  - OfficeOpenXml.FormulaParsing.LexicalAnalysis.ITokenFactory.Create(System.String,OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenType)
  langs:
  - csharp
  - vb
  name: ITokenFactory
  nameWithType: ITokenFactory
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.ITokenFactory
  type: Interface
  source:
    remote:
      path: src/EPPlus/FormulaParsing/LexicalAnalysis/ITokenFactory.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: ITokenFactory
    path: ../src/EPPlus/FormulaParsing/LexicalAnalysis/ITokenFactory.cs
    startLine: 19
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  syntax:
    content: public interface ITokenFactory
    content.vb: Public Interface ITokenFactory
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.ITokenFactory.Create(System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token},System.String)
  commentId: M:OfficeOpenXml.FormulaParsing.LexicalAnalysis.ITokenFactory.Create(System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token},System.String)
  id: Create(System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token},System.String)
  parent: OfficeOpenXml.FormulaParsing.LexicalAnalysis.ITokenFactory
  langs:
  - csharp
  - vb
  name: Create(IEnumerable<Token>, String)
  nameWithType: ITokenFactory.Create(IEnumerable<Token>, String)
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.ITokenFactory.Create(System.Collections.Generic.IEnumerable<OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token>, System.String)
  type: Method
  source:
    remote:
      path: src/EPPlus/FormulaParsing/LexicalAnalysis/ITokenFactory.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Create
    path: ../src/EPPlus/FormulaParsing/LexicalAnalysis/ITokenFactory.cs
    startLine: 21
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  syntax:
    content: Token Create(IEnumerable<Token> tokens, string token)
    parameters:
    - id: tokens
      type: System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token}
    - id: token
      type: System.String
    return:
      type: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token
    content.vb: Function Create(tokens As IEnumerable(Of Token), token As String) As Token
  overload: OfficeOpenXml.FormulaParsing.LexicalAnalysis.ITokenFactory.Create*
  nameWithType.vb: ITokenFactory.Create(IEnumerable(Of Token), String)
  fullName.vb: OfficeOpenXml.FormulaParsing.LexicalAnalysis.ITokenFactory.Create(System.Collections.Generic.IEnumerable(Of OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token), System.String)
  name.vb: Create(IEnumerable(Of Token), String)
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.ITokenFactory.Create(System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token},System.String,System.String)
  commentId: M:OfficeOpenXml.FormulaParsing.LexicalAnalysis.ITokenFactory.Create(System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token},System.String,System.String)
  id: Create(System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token},System.String,System.String)
  parent: OfficeOpenXml.FormulaParsing.LexicalAnalysis.ITokenFactory
  langs:
  - csharp
  - vb
  name: Create(IEnumerable<Token>, String, String)
  nameWithType: ITokenFactory.Create(IEnumerable<Token>, String, String)
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.ITokenFactory.Create(System.Collections.Generic.IEnumerable<OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token>, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/EPPlus/FormulaParsing/LexicalAnalysis/ITokenFactory.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Create
    path: ../src/EPPlus/FormulaParsing/LexicalAnalysis/ITokenFactory.cs
    startLine: 22
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  syntax:
    content: Token Create(IEnumerable<Token> tokens, string token, string worksheet)
    parameters:
    - id: tokens
      type: System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token}
    - id: token
      type: System.String
    - id: worksheet
      type: System.String
    return:
      type: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token
    content.vb: Function Create(tokens As IEnumerable(Of Token), token As String, worksheet As String) As Token
  overload: OfficeOpenXml.FormulaParsing.LexicalAnalysis.ITokenFactory.Create*
  nameWithType.vb: ITokenFactory.Create(IEnumerable(Of Token), String, String)
  fullName.vb: OfficeOpenXml.FormulaParsing.LexicalAnalysis.ITokenFactory.Create(System.Collections.Generic.IEnumerable(Of OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token), System.String, System.String)
  name.vb: Create(IEnumerable(Of Token), String, String)
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.ITokenFactory.Create(System.String,OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenType)
  commentId: M:OfficeOpenXml.FormulaParsing.LexicalAnalysis.ITokenFactory.Create(System.String,OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenType)
  id: Create(System.String,OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenType)
  parent: OfficeOpenXml.FormulaParsing.LexicalAnalysis.ITokenFactory
  langs:
  - csharp
  - vb
  name: Create(String, TokenType)
  nameWithType: ITokenFactory.Create(String, TokenType)
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.ITokenFactory.Create(System.String, OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenType)
  type: Method
  source:
    remote:
      path: src/EPPlus/FormulaParsing/LexicalAnalysis/ITokenFactory.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Create
    path: ../src/EPPlus/FormulaParsing/LexicalAnalysis/ITokenFactory.cs
    startLine: 23
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  syntax:
    content: Token Create(string token, TokenType explicitTokenType)
    parameters:
    - id: token
      type: System.String
    - id: explicitTokenType
      type: OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenType
    return:
      type: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token
    content.vb: Function Create(token As String, explicitTokenType As TokenType) As Token
  overload: OfficeOpenXml.FormulaParsing.LexicalAnalysis.ITokenFactory.Create*
references:
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  commentId: N:OfficeOpenXml.FormulaParsing.LexicalAnalysis
  name: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  nameWithType: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.ITokenFactory.Create*
  commentId: Overload:OfficeOpenXml.FormulaParsing.LexicalAnalysis.ITokenFactory.Create
  name: Create
  nameWithType: ITokenFactory.Create
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.ITokenFactory.Create
- uid: System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token}
  commentId: T:System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Token>
  nameWithType: IEnumerable<Token>
  fullName: System.Collections.Generic.IEnumerable<OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token>
  nameWithType.vb: IEnumerable(Of Token)
  fullName.vb: System.Collections.Generic.IEnumerable(Of OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token)
  name.vb: IEnumerable(Of Token)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token
    name: Token
    nameWithType: Token
    fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token
    name: Token
    nameWithType: Token
    fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token
  commentId: T:OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token
  parent: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  name: Token
  nameWithType: Token
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenType
  commentId: T:OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenType
  parent: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  name: TokenType
  nameWithType: TokenType
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.TokenType
