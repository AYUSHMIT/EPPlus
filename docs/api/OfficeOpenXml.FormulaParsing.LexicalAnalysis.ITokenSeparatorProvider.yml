### YamlMime:ManagedReference
items:
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.ITokenSeparatorProvider
  commentId: T:OfficeOpenXml.FormulaParsing.LexicalAnalysis.ITokenSeparatorProvider
  id: ITokenSeparatorProvider
  parent: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  children:
  - OfficeOpenXml.FormulaParsing.LexicalAnalysis.ITokenSeparatorProvider.GetToken(System.String)
  - OfficeOpenXml.FormulaParsing.LexicalAnalysis.ITokenSeparatorProvider.IsOperator(System.String)
  - OfficeOpenXml.FormulaParsing.LexicalAnalysis.ITokenSeparatorProvider.IsPossibleLastPartOfMultipleCharOperator(System.String)
  - OfficeOpenXml.FormulaParsing.LexicalAnalysis.ITokenSeparatorProvider.Tokens
  langs:
  - csharp
  - vb
  name: ITokenSeparatorProvider
  nameWithType: ITokenSeparatorProvider
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.ITokenSeparatorProvider
  type: Interface
  source:
    remote:
      path: src/EPPlus/FormulaParsing/LexicalAnalysis/ITokenSeparatorProvider.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: ITokenSeparatorProvider
    path: ../src/EPPlus/FormulaParsing/LexicalAnalysis/ITokenSeparatorProvider.cs
    startLine: 19
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  syntax:
    content: public interface ITokenSeparatorProvider
    content.vb: Public Interface ITokenSeparatorProvider
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.ITokenSeparatorProvider.Tokens
  commentId: P:OfficeOpenXml.FormulaParsing.LexicalAnalysis.ITokenSeparatorProvider.Tokens
  id: Tokens
  parent: OfficeOpenXml.FormulaParsing.LexicalAnalysis.ITokenSeparatorProvider
  langs:
  - csharp
  - vb
  name: Tokens
  nameWithType: ITokenSeparatorProvider.Tokens
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.ITokenSeparatorProvider.Tokens
  type: Property
  source:
    remote:
      path: src/EPPlus/FormulaParsing/LexicalAnalysis/ITokenSeparatorProvider.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Tokens
    path: ../src/EPPlus/FormulaParsing/LexicalAnalysis/ITokenSeparatorProvider.cs
    startLine: 21
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  syntax:
    content: IDictionary<string, Token> Tokens { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IDictionary{System.String,OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token}
    content.vb: ReadOnly Property Tokens As IDictionary(Of String, Token)
  overload: OfficeOpenXml.FormulaParsing.LexicalAnalysis.ITokenSeparatorProvider.Tokens*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.ITokenSeparatorProvider.IsOperator(System.String)
  commentId: M:OfficeOpenXml.FormulaParsing.LexicalAnalysis.ITokenSeparatorProvider.IsOperator(System.String)
  id: IsOperator(System.String)
  parent: OfficeOpenXml.FormulaParsing.LexicalAnalysis.ITokenSeparatorProvider
  langs:
  - csharp
  - vb
  name: IsOperator(String)
  nameWithType: ITokenSeparatorProvider.IsOperator(String)
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.ITokenSeparatorProvider.IsOperator(System.String)
  type: Method
  source:
    remote:
      path: src/EPPlus/FormulaParsing/LexicalAnalysis/ITokenSeparatorProvider.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: IsOperator
    path: ../src/EPPlus/FormulaParsing/LexicalAnalysis/ITokenSeparatorProvider.cs
    startLine: 23
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  syntax:
    content: bool IsOperator(string item)
    parameters:
    - id: item
      type: System.String
    return:
      type: System.Boolean
    content.vb: Function IsOperator(item As String) As Boolean
  overload: OfficeOpenXml.FormulaParsing.LexicalAnalysis.ITokenSeparatorProvider.IsOperator*
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.ITokenSeparatorProvider.IsPossibleLastPartOfMultipleCharOperator(System.String)
  commentId: M:OfficeOpenXml.FormulaParsing.LexicalAnalysis.ITokenSeparatorProvider.IsPossibleLastPartOfMultipleCharOperator(System.String)
  id: IsPossibleLastPartOfMultipleCharOperator(System.String)
  parent: OfficeOpenXml.FormulaParsing.LexicalAnalysis.ITokenSeparatorProvider
  langs:
  - csharp
  - vb
  name: IsPossibleLastPartOfMultipleCharOperator(String)
  nameWithType: ITokenSeparatorProvider.IsPossibleLastPartOfMultipleCharOperator(String)
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.ITokenSeparatorProvider.IsPossibleLastPartOfMultipleCharOperator(System.String)
  type: Method
  source:
    remote:
      path: src/EPPlus/FormulaParsing/LexicalAnalysis/ITokenSeparatorProvider.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: IsPossibleLastPartOfMultipleCharOperator
    path: ../src/EPPlus/FormulaParsing/LexicalAnalysis/ITokenSeparatorProvider.cs
    startLine: 25
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  syntax:
    content: bool IsPossibleLastPartOfMultipleCharOperator(string part)
    parameters:
    - id: part
      type: System.String
    return:
      type: System.Boolean
    content.vb: Function IsPossibleLastPartOfMultipleCharOperator(part As String) As Boolean
  overload: OfficeOpenXml.FormulaParsing.LexicalAnalysis.ITokenSeparatorProvider.IsPossibleLastPartOfMultipleCharOperator*
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.ITokenSeparatorProvider.GetToken(System.String)
  commentId: M:OfficeOpenXml.FormulaParsing.LexicalAnalysis.ITokenSeparatorProvider.GetToken(System.String)
  id: GetToken(System.String)
  parent: OfficeOpenXml.FormulaParsing.LexicalAnalysis.ITokenSeparatorProvider
  langs:
  - csharp
  - vb
  name: GetToken(String)
  nameWithType: ITokenSeparatorProvider.GetToken(String)
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.ITokenSeparatorProvider.GetToken(System.String)
  type: Method
  source:
    remote:
      path: src/EPPlus/FormulaParsing/LexicalAnalysis/ITokenSeparatorProvider.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: GetToken
    path: ../src/EPPlus/FormulaParsing/LexicalAnalysis/ITokenSeparatorProvider.cs
    startLine: 27
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  syntax:
    content: Token? GetToken(string candidate)
    parameters:
    - id: candidate
      type: System.String
    return:
      type: System.Nullable{OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token}
    content.vb: Function GetToken(candidate As String) As Token?
  overload: OfficeOpenXml.FormulaParsing.LexicalAnalysis.ITokenSeparatorProvider.GetToken*
references:
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  commentId: N:OfficeOpenXml.FormulaParsing.LexicalAnalysis
  name: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  nameWithType: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.ITokenSeparatorProvider.Tokens*
  commentId: Overload:OfficeOpenXml.FormulaParsing.LexicalAnalysis.ITokenSeparatorProvider.Tokens
  name: Tokens
  nameWithType: ITokenSeparatorProvider.Tokens
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.ITokenSeparatorProvider.Tokens
- uid: System.Collections.Generic.IDictionary{System.String,OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token}
  commentId: T:System.Collections.Generic.IDictionary{System.String,OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<String, Token>
  nameWithType: IDictionary<String, Token>
  fullName: System.Collections.Generic.IDictionary<System.String, OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token>
  nameWithType.vb: IDictionary(Of String, Token)
  fullName.vb: System.Collections.Generic.IDictionary(Of System.String, OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token)
  name.vb: IDictionary(Of String, Token)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token
    name: Token
    nameWithType: Token
    fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token
    name: Token
    nameWithType: Token
    fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.ITokenSeparatorProvider.IsOperator*
  commentId: Overload:OfficeOpenXml.FormulaParsing.LexicalAnalysis.ITokenSeparatorProvider.IsOperator
  name: IsOperator
  nameWithType: ITokenSeparatorProvider.IsOperator
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.ITokenSeparatorProvider.IsOperator
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.ITokenSeparatorProvider.IsPossibleLastPartOfMultipleCharOperator*
  commentId: Overload:OfficeOpenXml.FormulaParsing.LexicalAnalysis.ITokenSeparatorProvider.IsPossibleLastPartOfMultipleCharOperator
  name: IsPossibleLastPartOfMultipleCharOperator
  nameWithType: ITokenSeparatorProvider.IsPossibleLastPartOfMultipleCharOperator
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.ITokenSeparatorProvider.IsPossibleLastPartOfMultipleCharOperator
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.ITokenSeparatorProvider.GetToken*
  commentId: Overload:OfficeOpenXml.FormulaParsing.LexicalAnalysis.ITokenSeparatorProvider.GetToken
  name: GetToken
  nameWithType: ITokenSeparatorProvider.GetToken
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.ITokenSeparatorProvider.GetToken
- uid: System.Nullable{OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token}
  commentId: T:System.Nullable{OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Token>
  nameWithType: Nullable<Token>
  fullName: System.Nullable<OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token>
  nameWithType.vb: Nullable(Of Token)
  fullName.vb: System.Nullable(Of OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token)
  name.vb: Nullable(Of Token)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token
    name: Token
    nameWithType: Token
    fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token
    name: Token
    nameWithType: Token
    fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
