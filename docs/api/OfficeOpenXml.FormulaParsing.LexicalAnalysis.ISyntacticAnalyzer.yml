### YamlMime:ManagedReference
items:
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.ISyntacticAnalyzer
  commentId: T:OfficeOpenXml.FormulaParsing.LexicalAnalysis.ISyntacticAnalyzer
  id: ISyntacticAnalyzer
  parent: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  children:
  - OfficeOpenXml.FormulaParsing.LexicalAnalysis.ISyntacticAnalyzer.Analyze(System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token})
  langs:
  - csharp
  - vb
  name: ISyntacticAnalyzer
  nameWithType: ISyntacticAnalyzer
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.ISyntacticAnalyzer
  type: Interface
  source:
    remote:
      path: src/EPPlus/FormulaParsing/LexicalAnalysis/ISyntacticAnalyzer.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: ISyntacticAnalyzer
    path: ../src/EPPlus/FormulaParsing/LexicalAnalysis/ISyntacticAnalyzer.cs
    startLine: 22
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  summary: "\nInterface for analysing parsed tokens.\n"
  example: []
  syntax:
    content: public interface ISyntacticAnalyzer
    content.vb: Public Interface ISyntacticAnalyzer
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.ISyntacticAnalyzer.Analyze(System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token})
  commentId: M:OfficeOpenXml.FormulaParsing.LexicalAnalysis.ISyntacticAnalyzer.Analyze(System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token})
  id: Analyze(System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token})
  parent: OfficeOpenXml.FormulaParsing.LexicalAnalysis.ISyntacticAnalyzer
  langs:
  - csharp
  - vb
  name: Analyze(IEnumerable<Token>)
  nameWithType: ISyntacticAnalyzer.Analyze(IEnumerable<Token>)
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.ISyntacticAnalyzer.Analyze(System.Collections.Generic.IEnumerable<OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token>)
  type: Method
  source:
    remote:
      path: src/EPPlus/FormulaParsing/LexicalAnalysis/ISyntacticAnalyzer.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Analyze
    path: ../src/EPPlus/FormulaParsing/LexicalAnalysis/ISyntacticAnalyzer.cs
    startLine: 28
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  summary: "\nMethod for analyzing parsed tokens.\n"
  example: []
  syntax:
    content: void Analyze(IEnumerable<Token> tokens)
    parameters:
    - id: tokens
      type: System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token}
      description: ''
    content.vb: Sub Analyze(tokens As IEnumerable(Of Token))
  overload: OfficeOpenXml.FormulaParsing.LexicalAnalysis.ISyntacticAnalyzer.Analyze*
  nameWithType.vb: ISyntacticAnalyzer.Analyze(IEnumerable(Of Token))
  fullName.vb: OfficeOpenXml.FormulaParsing.LexicalAnalysis.ISyntacticAnalyzer.Analyze(System.Collections.Generic.IEnumerable(Of OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token))
  name.vb: Analyze(IEnumerable(Of Token))
references:
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  commentId: N:OfficeOpenXml.FormulaParsing.LexicalAnalysis
  name: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  nameWithType: OfficeOpenXml.FormulaParsing.LexicalAnalysis
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis
- uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.ISyntacticAnalyzer.Analyze*
  commentId: Overload:OfficeOpenXml.FormulaParsing.LexicalAnalysis.ISyntacticAnalyzer.Analyze
  name: Analyze
  nameWithType: ISyntacticAnalyzer.Analyze
  fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.ISyntacticAnalyzer.Analyze
- uid: System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token}
  commentId: T:System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Token>
  nameWithType: IEnumerable<Token>
  fullName: System.Collections.Generic.IEnumerable<OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token>
  nameWithType.vb: IEnumerable(Of Token)
  fullName.vb: System.Collections.Generic.IEnumerable(Of OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token)
  name.vb: IEnumerable(Of Token)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token
    name: Token
    nameWithType: Token
    fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token
    name: Token
    nameWithType: Token
    fullName: OfficeOpenXml.FormulaParsing.LexicalAnalysis.Token
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
