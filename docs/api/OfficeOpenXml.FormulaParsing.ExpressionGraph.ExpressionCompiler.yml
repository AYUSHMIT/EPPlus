### YamlMime:ManagedReference
items:
- uid: OfficeOpenXml.FormulaParsing.ExpressionGraph.ExpressionCompiler
  commentId: T:OfficeOpenXml.FormulaParsing.ExpressionGraph.ExpressionCompiler
  id: ExpressionCompiler
  parent: OfficeOpenXml.FormulaParsing.ExpressionGraph
  children:
  - OfficeOpenXml.FormulaParsing.ExpressionGraph.ExpressionCompiler.#ctor
  - OfficeOpenXml.FormulaParsing.ExpressionGraph.ExpressionCompiler.#ctor(OfficeOpenXml.FormulaParsing.ExpressionGraph.IExpressionConverter,OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileStrategy.ICompileStrategyFactory)
  - OfficeOpenXml.FormulaParsing.ExpressionGraph.ExpressionCompiler.Compile(System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression})
  - OfficeOpenXml.FormulaParsing.ExpressionGraph.ExpressionCompiler.Compile(System.String,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression})
  langs:
  - csharp
  - vb
  name: ExpressionCompiler
  nameWithType: ExpressionCompiler
  fullName: OfficeOpenXml.FormulaParsing.ExpressionGraph.ExpressionCompiler
  type: Class
  source:
    remote:
      path: src/EPPlus/FormulaParsing/ExpressionGraph/ExpressionCompiler.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: ExpressionCompiler
    path: ../src/EPPlus/FormulaParsing/ExpressionGraph/ExpressionCompiler.cs
    startLine: 21
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.ExpressionGraph
  syntax:
    content: 'public class ExpressionCompiler : IExpressionCompiler'
    content.vb: >-
      Public Class ExpressionCompiler
          Implements IExpressionCompiler
  inheritance:
  - System.Object
  implements:
  - OfficeOpenXml.FormulaParsing.ExpressionGraph.IExpressionCompiler
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: OfficeOpenXml.FormulaParsing.ExpressionGraph.ExpressionCompiler.#ctor
  commentId: M:OfficeOpenXml.FormulaParsing.ExpressionGraph.ExpressionCompiler.#ctor
  id: '#ctor'
  parent: OfficeOpenXml.FormulaParsing.ExpressionGraph.ExpressionCompiler
  langs:
  - csharp
  - vb
  name: ExpressionCompiler()
  nameWithType: ExpressionCompiler.ExpressionCompiler()
  fullName: OfficeOpenXml.FormulaParsing.ExpressionGraph.ExpressionCompiler.ExpressionCompiler()
  type: Constructor
  source:
    remote:
      path: src/EPPlus/FormulaParsing/ExpressionGraph/ExpressionCompiler.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: .ctor
    path: ../src/EPPlus/FormulaParsing/ExpressionGraph/ExpressionCompiler.cs
    startLine: 27
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.ExpressionGraph
  syntax:
    content: public ExpressionCompiler()
    content.vb: Public Sub New
  overload: OfficeOpenXml.FormulaParsing.ExpressionGraph.ExpressionCompiler.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.FormulaParsing.ExpressionGraph.ExpressionCompiler.#ctor(OfficeOpenXml.FormulaParsing.ExpressionGraph.IExpressionConverter,OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileStrategy.ICompileStrategyFactory)
  commentId: M:OfficeOpenXml.FormulaParsing.ExpressionGraph.ExpressionCompiler.#ctor(OfficeOpenXml.FormulaParsing.ExpressionGraph.IExpressionConverter,OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileStrategy.ICompileStrategyFactory)
  id: '#ctor(OfficeOpenXml.FormulaParsing.ExpressionGraph.IExpressionConverter,OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileStrategy.ICompileStrategyFactory)'
  parent: OfficeOpenXml.FormulaParsing.ExpressionGraph.ExpressionCompiler
  langs:
  - csharp
  - vb
  name: ExpressionCompiler(IExpressionConverter, ICompileStrategyFactory)
  nameWithType: ExpressionCompiler.ExpressionCompiler(IExpressionConverter, ICompileStrategyFactory)
  fullName: OfficeOpenXml.FormulaParsing.ExpressionGraph.ExpressionCompiler.ExpressionCompiler(OfficeOpenXml.FormulaParsing.ExpressionGraph.IExpressionConverter, OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileStrategy.ICompileStrategyFactory)
  type: Constructor
  source:
    remote:
      path: src/EPPlus/FormulaParsing/ExpressionGraph/ExpressionCompiler.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: .ctor
    path: ../src/EPPlus/FormulaParsing/ExpressionGraph/ExpressionCompiler.cs
    startLine: 33
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.ExpressionGraph
  syntax:
    content: public ExpressionCompiler(IExpressionConverter expressionConverter, ICompileStrategyFactory compileStrategyFactory)
    parameters:
    - id: expressionConverter
      type: OfficeOpenXml.FormulaParsing.ExpressionGraph.IExpressionConverter
    - id: compileStrategyFactory
      type: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileStrategy.ICompileStrategyFactory
    content.vb: Public Sub New(expressionConverter As IExpressionConverter, compileStrategyFactory As ICompileStrategyFactory)
  overload: OfficeOpenXml.FormulaParsing.ExpressionGraph.ExpressionCompiler.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: OfficeOpenXml.FormulaParsing.ExpressionGraph.ExpressionCompiler.Compile(System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression})
  commentId: M:OfficeOpenXml.FormulaParsing.ExpressionGraph.ExpressionCompiler.Compile(System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression})
  id: Compile(System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression})
  parent: OfficeOpenXml.FormulaParsing.ExpressionGraph.ExpressionCompiler
  langs:
  - csharp
  - vb
  name: Compile(IEnumerable<Expression>)
  nameWithType: ExpressionCompiler.Compile(IEnumerable<Expression>)
  fullName: OfficeOpenXml.FormulaParsing.ExpressionGraph.ExpressionCompiler.Compile(System.Collections.Generic.IEnumerable<OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression>)
  type: Method
  source:
    remote:
      path: src/EPPlus/FormulaParsing/ExpressionGraph/ExpressionCompiler.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Compile
    path: ../src/EPPlus/FormulaParsing/ExpressionGraph/ExpressionCompiler.cs
    startLine: 39
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.ExpressionGraph
  syntax:
    content: public CompileResult Compile(IEnumerable<Expression> expressions)
    parameters:
    - id: expressions
      type: System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression}
    return:
      type: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult
    content.vb: Public Function Compile(expressions As IEnumerable(Of Expression)) As CompileResult
  overload: OfficeOpenXml.FormulaParsing.ExpressionGraph.ExpressionCompiler.Compile*
  implements:
  - OfficeOpenXml.FormulaParsing.ExpressionGraph.IExpressionCompiler.Compile(System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression})
  nameWithType.vb: ExpressionCompiler.Compile(IEnumerable(Of Expression))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: OfficeOpenXml.FormulaParsing.ExpressionGraph.ExpressionCompiler.Compile(System.Collections.Generic.IEnumerable(Of OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression))
  name.vb: Compile(IEnumerable(Of Expression))
- uid: OfficeOpenXml.FormulaParsing.ExpressionGraph.ExpressionCompiler.Compile(System.String,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression})
  commentId: M:OfficeOpenXml.FormulaParsing.ExpressionGraph.ExpressionCompiler.Compile(System.String,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression})
  id: Compile(System.String,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression})
  parent: OfficeOpenXml.FormulaParsing.ExpressionGraph.ExpressionCompiler
  langs:
  - csharp
  - vb
  name: Compile(String, Int32, Int32, IEnumerable<Expression>)
  nameWithType: ExpressionCompiler.Compile(String, Int32, Int32, IEnumerable<Expression>)
  fullName: OfficeOpenXml.FormulaParsing.ExpressionGraph.ExpressionCompiler.Compile(System.String, System.Int32, System.Int32, System.Collections.Generic.IEnumerable<OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression>)
  type: Method
  source:
    remote:
      path: src/EPPlus/FormulaParsing/ExpressionGraph/ExpressionCompiler.cs
      branch: develop
      repo: https://github.com/EPPlusSoftware/EPPlus.git
    id: Compile
    path: ../src/EPPlus/FormulaParsing/ExpressionGraph/ExpressionCompiler.cs
    startLine: 44
  assemblies:
  - EPPlus
  namespace: OfficeOpenXml.FormulaParsing.ExpressionGraph
  syntax:
    content: public CompileResult Compile(string worksheet, int row, int column, IEnumerable<Expression> expressions)
    parameters:
    - id: worksheet
      type: System.String
    - id: row
      type: System.Int32
    - id: column
      type: System.Int32
    - id: expressions
      type: System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression}
    return:
      type: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult
    content.vb: Public Function Compile(worksheet As String, row As Integer, column As Integer, expressions As IEnumerable(Of Expression)) As CompileResult
  overload: OfficeOpenXml.FormulaParsing.ExpressionGraph.ExpressionCompiler.Compile*
  nameWithType.vb: ExpressionCompiler.Compile(String, Int32, Int32, IEnumerable(Of Expression))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: OfficeOpenXml.FormulaParsing.ExpressionGraph.ExpressionCompiler.Compile(System.String, System.Int32, System.Int32, System.Collections.Generic.IEnumerable(Of OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression))
  name.vb: Compile(String, Int32, Int32, IEnumerable(Of Expression))
references:
- uid: OfficeOpenXml.FormulaParsing.ExpressionGraph
  commentId: N:OfficeOpenXml.FormulaParsing.ExpressionGraph
  name: OfficeOpenXml.FormulaParsing.ExpressionGraph
  nameWithType: OfficeOpenXml.FormulaParsing.ExpressionGraph
  fullName: OfficeOpenXml.FormulaParsing.ExpressionGraph
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: OfficeOpenXml.FormulaParsing.ExpressionGraph.IExpressionCompiler
  commentId: T:OfficeOpenXml.FormulaParsing.ExpressionGraph.IExpressionCompiler
  parent: OfficeOpenXml.FormulaParsing.ExpressionGraph
  name: IExpressionCompiler
  nameWithType: IExpressionCompiler
  fullName: OfficeOpenXml.FormulaParsing.ExpressionGraph.IExpressionCompiler
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: OfficeOpenXml.FormulaParsing.ExpressionGraph.ExpressionCompiler.#ctor*
  commentId: Overload:OfficeOpenXml.FormulaParsing.ExpressionGraph.ExpressionCompiler.#ctor
  name: ExpressionCompiler
  nameWithType: ExpressionCompiler.ExpressionCompiler
  fullName: OfficeOpenXml.FormulaParsing.ExpressionGraph.ExpressionCompiler.ExpressionCompiler
- uid: OfficeOpenXml.FormulaParsing.ExpressionGraph.IExpressionConverter
  commentId: T:OfficeOpenXml.FormulaParsing.ExpressionGraph.IExpressionConverter
  parent: OfficeOpenXml.FormulaParsing.ExpressionGraph
  name: IExpressionConverter
  nameWithType: IExpressionConverter
  fullName: OfficeOpenXml.FormulaParsing.ExpressionGraph.IExpressionConverter
- uid: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileStrategy.ICompileStrategyFactory
  commentId: T:OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileStrategy.ICompileStrategyFactory
  parent: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileStrategy
  name: ICompileStrategyFactory
  nameWithType: ICompileStrategyFactory
  fullName: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileStrategy.ICompileStrategyFactory
- uid: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileStrategy
  commentId: N:OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileStrategy
  name: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileStrategy
  nameWithType: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileStrategy
  fullName: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileStrategy
- uid: OfficeOpenXml.FormulaParsing.ExpressionGraph.ExpressionCompiler.Compile*
  commentId: Overload:OfficeOpenXml.FormulaParsing.ExpressionGraph.ExpressionCompiler.Compile
  name: Compile
  nameWithType: ExpressionCompiler.Compile
  fullName: OfficeOpenXml.FormulaParsing.ExpressionGraph.ExpressionCompiler.Compile
- uid: OfficeOpenXml.FormulaParsing.ExpressionGraph.IExpressionCompiler.Compile(System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression})
  commentId: M:OfficeOpenXml.FormulaParsing.ExpressionGraph.IExpressionCompiler.Compile(System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression})
  parent: OfficeOpenXml.FormulaParsing.ExpressionGraph.IExpressionCompiler
  isExternal: true
  name: Compile(IEnumerable<Expression>)
  nameWithType: IExpressionCompiler.Compile(IEnumerable<Expression>)
  fullName: OfficeOpenXml.FormulaParsing.ExpressionGraph.IExpressionCompiler.Compile(System.Collections.Generic.IEnumerable<OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression>)
  nameWithType.vb: IExpressionCompiler.Compile(IEnumerable(Of Expression))
  fullName.vb: OfficeOpenXml.FormulaParsing.ExpressionGraph.IExpressionCompiler.Compile(System.Collections.Generic.IEnumerable(Of OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression))
  name.vb: Compile(IEnumerable(Of Expression))
  spec.csharp:
  - uid: OfficeOpenXml.FormulaParsing.ExpressionGraph.IExpressionCompiler.Compile(System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression})
    name: Compile
    nameWithType: IExpressionCompiler.Compile
    fullName: OfficeOpenXml.FormulaParsing.ExpressionGraph.IExpressionCompiler.Compile
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression
    name: Expression
    nameWithType: Expression
    fullName: OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: OfficeOpenXml.FormulaParsing.ExpressionGraph.IExpressionCompiler.Compile(System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression})
    name: Compile
    nameWithType: IExpressionCompiler.Compile
    fullName: OfficeOpenXml.FormulaParsing.ExpressionGraph.IExpressionCompiler.Compile
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression
    name: Expression
    nameWithType: Expression
    fullName: OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression}
  commentId: T:System.Collections.Generic.IEnumerable{OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Expression>
  nameWithType: IEnumerable<Expression>
  fullName: System.Collections.Generic.IEnumerable<OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression>
  nameWithType.vb: IEnumerable(Of Expression)
  fullName.vb: System.Collections.Generic.IEnumerable(Of OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression)
  name.vb: IEnumerable(Of Expression)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression
    name: Expression
    nameWithType: Expression
    fullName: OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression
    name: Expression
    nameWithType: Expression
    fullName: OfficeOpenXml.FormulaParsing.ExpressionGraph.Expression
  - name: )
    nameWithType: )
    fullName: )
- uid: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult
  commentId: T:OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult
  parent: OfficeOpenXml.FormulaParsing.ExpressionGraph
  name: CompileResult
  nameWithType: CompileResult
  fullName: OfficeOpenXml.FormulaParsing.ExpressionGraph.CompileResult
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
